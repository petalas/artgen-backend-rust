<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="44311"><g><title>AppKit`-[NSApplication _handleEvent:] (6 samples, 0.01%)</title><rect x="0.0000%" y="549" width="0.0135%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app::WinitApplication::send_event (6 samples, 0.01%)</title><rect x="0.0000%" y="533" width="0.0135%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="543.50"></text></g><g><title>AppKit`-[NSApplication(NSEventRouting) sendEvent:] (6 samples, 0.01%)</title><rect x="0.0000%" y="517" width="0.0135%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="527.50"></text></g><g><title>HIToolbox`AEProcessAppleEvent (5 samples, 0.01%)</title><rect x="0.0181%" y="517" width="0.0113%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="5"/><text x="0.2681%" y="527.50"></text></g><g><title>AE`aeProcessAppleEvent (5 samples, 0.01%)</title><rect x="0.0181%" y="501" width="0.0113%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="5"/><text x="0.2681%" y="511.50"></text></g><g><title>AE`0x000000018d36b2c0 (5 samples, 0.01%)</title><rect x="0.0181%" y="485" width="0.0113%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="5"/><text x="0.2681%" y="495.50"></text></g><g><title>AE`0x000000018d36b36c (5 samples, 0.01%)</title><rect x="0.0181%" y="469" width="0.0113%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="5"/><text x="0.2681%" y="479.50"></text></g><g><title>Foundation`_NSAppleEventManagerGenericHandler (5 samples, 0.01%)</title><rect x="0.0181%" y="453" width="0.0113%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="5"/><text x="0.2681%" y="463.50"></text></g><g><title>Foundation`-[NSAppleEventManager dispatchRawAppleEvent:withRawReply:handlerRefCon:] (5 samples, 0.01%)</title><rect x="0.0181%" y="437" width="0.0113%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="5"/><text x="0.2681%" y="447.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleCoreEvent:withReplyEvent:] (5 samples, 0.01%)</title><rect x="0.0181%" y="421" width="0.0113%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="5"/><text x="0.2681%" y="431.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleAEOpenEvent:] (5 samples, 0.01%)</title><rect x="0.0181%" y="405" width="0.0113%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="5"/><text x="0.2681%" y="415.50"></text></g><g><title>AppKit`-[NSApplication _sendFinishLaunchingNotification] (5 samples, 0.01%)</title><rect x="0.0181%" y="389" width="0.0113%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="5"/><text x="0.2681%" y="399.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ (7 samples, 0.02%)</title><rect x="0.0384%" y="437" width="0.0158%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="7"/><text x="0.2884%" y="447.50"></text></g><g><title>libdispatch.dylib`_dispatch_main_queue_callback_4CF (7 samples, 0.02%)</title><rect x="0.0384%" y="421" width="0.0158%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="7"/><text x="0.2884%" y="431.50"></text></g><g><title>libdispatch.dylib`_dispatch_main_queue_drain (7 samples, 0.02%)</title><rect x="0.0384%" y="405" width="0.0158%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="7"/><text x="0.2884%" y="415.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (5 samples, 0.01%)</title><rect x="0.0429%" y="389" width="0.0113%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="5"/><text x="0.2929%" y="399.50"></text></g><g><title>AppKit`__38-[NSApplication setWindowsNeedUpdate:]_block_invoke_2 (5 samples, 0.01%)</title><rect x="0.0654%" y="389" width="0.0113%" height="15" fill="rgb(225,20,46)" fg:x="29" fg:w="5"/><text x="0.3154%" y="399.50"></text></g><g><title>AppKit`-[NSApplication updateWindows] (5 samples, 0.01%)</title><rect x="0.0654%" y="373" width="0.0113%" height="15" fill="rgb(210,31,41)" fg:x="29" fg:w="5"/><text x="0.3154%" y="383.50"></text></g><g><title>AppKit`+[NSTextInputContext currentInputContext_withFirstResponderSync:] (5 samples, 0.01%)</title><rect x="0.0654%" y="357" width="0.0113%" height="15" fill="rgb(221,200,47)" fg:x="29" fg:w="5"/><text x="0.3154%" y="367.50"></text></g><g><title>AppKit`-[NSTextInputContext activate] (5 samples, 0.01%)</title><rect x="0.0654%" y="341" width="0.0113%" height="15" fill="rgb(226,26,5)" fg:x="29" fg:w="5"/><text x="0.3154%" y="351.50"></text></g><g><title>QuartzCore`CA::Layer::display_if_needed (5 samples, 0.01%)</title><rect x="0.0790%" y="341" width="0.0113%" height="15" fill="rgb(249,33,26)" fg:x="35" fg:w="5"/><text x="0.3290%" y="351.50"></text></g><g><title>QuartzCore`CA::Context::commit_transaction (9 samples, 0.02%)</title><rect x="0.0767%" y="357" width="0.0203%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="9"/><text x="0.3267%" y="367.50"></text></g><g><title>AppKit`___NSRunLoopObserverCreateWithHandler_block_invoke (18 samples, 0.04%)</title><rect x="0.0654%" y="405" width="0.0406%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="18"/><text x="0.3154%" y="415.50"></text></g><g><title>AppKit`__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke (13 samples, 0.03%)</title><rect x="0.0767%" y="389" width="0.0293%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="13"/><text x="0.3267%" y="399.50"></text></g><g><title>QuartzCore`CA::Transaction::commit (13 samples, 0.03%)</title><rect x="0.0767%" y="373" width="0.0293%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="13"/><text x="0.3267%" y="383.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateTitleProperties:animated:] (6 samples, 0.01%)</title><rect x="0.1264%" y="165" width="0.0135%" height="15" fill="rgb(249,31,29)" fg:x="56" fg:w="6"/><text x="0.3764%" y="175.50"></text></g><g><title>AppKit`-[NSThemeFrame setRepresentedURL:] (6 samples, 0.01%)</title><rect x="0.1264%" y="149" width="0.0135%" height="15" fill="rgb(225,111,53)" fg:x="56" fg:w="6"/><text x="0.3764%" y="159.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateButtons] (6 samples, 0.01%)</title><rect x="0.1264%" y="133" width="0.0135%" height="15" fill="rgb(238,160,17)" fg:x="56" fg:w="6"/><text x="0.3764%" y="143.50"></text></g><g><title>AppKit`-[NSWindow showsFullScreenButton] (6 samples, 0.01%)</title><rect x="0.1264%" y="117" width="0.0135%" height="15" fill="rgb(214,148,48)" fg:x="56" fg:w="6"/><text x="0.3764%" y="127.50"></text></g><g><title>AppKit`-[NSWindow(NSFullScreen) canEnterFullScreenMode] (6 samples, 0.01%)</title><rect x="0.1264%" y="101" width="0.0135%" height="15" fill="rgb(232,36,49)" fg:x="56" fg:w="6"/><text x="0.3764%" y="111.50"></text></g><g><title>AppKit`-[NSWindow _effectiveCollectionBehavior] (6 samples, 0.01%)</title><rect x="0.1264%" y="85" width="0.0135%" height="15" fill="rgb(209,103,24)" fg:x="56" fg:w="6"/><text x="0.3764%" y="95.50"></text></g><g><title>AppKit`-[NSWindow _cacheAndSetPropertiesForCollectionBehavior:] (6 samples, 0.01%)</title><rect x="0.1264%" y="69" width="0.0135%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="6"/><text x="0.3764%" y="79.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateButtons] (6 samples, 0.01%)</title><rect x="0.1264%" y="53" width="0.0135%" height="15" fill="rgb(213,181,19)" fg:x="56" fg:w="6"/><text x="0.3764%" y="63.50"></text></g><g><title>AppKit`-[NSFrameView initWithFrame:styleMask:owner:] (7 samples, 0.02%)</title><rect x="0.1264%" y="181" width="0.0158%" height="15" fill="rgb(254,191,54)" fg:x="56" fg:w="7"/><text x="0.3764%" y="191.50"></text></g><g><title>AppKit`-[NSThemeFrame initWithFrame:styleMask:owner:] (10 samples, 0.02%)</title><rect x="0.1264%" y="197" width="0.0226%" height="15" fill="rgb(241,83,37)" fg:x="56" fg:w="10"/><text x="0.3764%" y="207.50"></text></g><g><title>AppKit`-[NSWindow initWithContentRect:styleMask:backing:defer:] (16 samples, 0.04%)</title><rect x="0.1241%" y="245" width="0.0361%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="16"/><text x="0.3741%" y="255.50"></text></g><g><title>AppKit`-[NSWindow _initContent:styleMask:backing:defer:contentView:] (16 samples, 0.04%)</title><rect x="0.1241%" y="229" width="0.0361%" height="15" fill="rgb(226,3,54)" fg:x="55" fg:w="16"/><text x="0.3741%" y="239.50"></text></g><g><title>AppKit`-[NSWindow _commonInitFrame:styleMask:backing:defer:] (15 samples, 0.03%)</title><rect x="0.1264%" y="213" width="0.0339%" height="15" fill="rgb(245,192,40)" fg:x="56" fg:w="15"/><text x="0.3764%" y="223.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::ContextHandle::create_window (21 samples, 0.05%)</title><rect x="0.1174%" y="293" width="0.0474%" height="15" fill="rgb(238,167,29)" fg:x="52" fg:w="21"/><text x="0.3674%" y="303.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::Window::new (18 samples, 0.04%)</title><rect x="0.1241%" y="277" width="0.0406%" height="15" fill="rgb(232,182,51)" fg:x="55" fg:w="18"/><text x="0.3741%" y="287.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::window::WinitWindow::new (18 samples, 0.04%)</title><rect x="0.1241%" y="261" width="0.0406%" height="15" fill="rgb(231,60,39)" fg:x="55" fg:w="18"/><text x="0.3741%" y="271.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyBlitContext copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:] (9 samples, 0.02%)</title><rect x="0.1693%" y="181" width="0.0203%" height="15" fill="rgb(208,69,12)" fg:x="75" fg:w="9"/><text x="0.4193%" y="191.50"></text></g><g><title>AGXMetalG13X`AGX::BlitDispatchContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::blitCDMBuffer (8 samples, 0.02%)</title><rect x="0.1715%" y="165" width="0.0181%" height="15" fill="rgb(235,93,37)" fg:x="76" fg:w="8"/><text x="0.4215%" y="175.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::buffer_unmap (15 samples, 0.03%)</title><rect x="0.1693%" y="213" width="0.0339%" height="15" fill="rgb(213,116,39)" fg:x="75" fg:w="15"/><text x="0.4193%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::buffer_unmap_inner (15 samples, 0.03%)</title><rect x="0.1693%" y="197" width="0.0339%" height="15" fill="rgb(222,207,29)" fg:x="75" fg:w="15"/><text x="0.4193%" y="207.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::buffer_unmap (16 samples, 0.04%)</title><rect x="0.1693%" y="245" width="0.0361%" height="15" fill="rgb(206,96,30)" fg:x="75" fg:w="16"/><text x="0.4193%" y="255.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::buffer_unmap (16 samples, 0.04%)</title><rect x="0.1693%" y="229" width="0.0361%" height="15" fill="rgb(218,138,4)" fg:x="75" fg:w="16"/><text x="0.4193%" y="239.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithDevice:pointer:length:alignment:options:sysMemSize:gpuAddress:args:argsSize:deallocator:] (41 samples, 0.09%)</title><rect x="0.2167%" y="117" width="0.0925%" height="15" fill="rgb(250,191,14)" fg:x="96" fg:w="41"/><text x="0.4667%" y="127.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (40 samples, 0.09%)</title><rect x="0.2189%" y="101" width="0.0903%" height="15" fill="rgb(239,60,40)" fg:x="97" fg:w="40"/><text x="0.4689%" y="111.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (40 samples, 0.09%)</title><rect x="0.2189%" y="85" width="0.0903%" height="15" fill="rgb(206,27,48)" fg:x="97" fg:w="40"/><text x="0.4689%" y="95.50"></text></g><g><title>IOKit`IOConnectCallMethod (39 samples, 0.09%)</title><rect x="0.2212%" y="69" width="0.0880%" height="15" fill="rgb(225,35,8)" fg:x="98" fg:w="39"/><text x="0.4712%" y="79.50"></text></g><g><title>IOKit`io_connect_method (39 samples, 0.09%)</title><rect x="0.2212%" y="53" width="0.0880%" height="15" fill="rgb(250,213,24)" fg:x="98" fg:w="39"/><text x="0.4712%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (39 samples, 0.09%)</title><rect x="0.2212%" y="37" width="0.0880%" height="15" fill="rgb(247,123,22)" fg:x="98" fg:w="39"/><text x="0.4712%" y="47.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (35 samples, 0.08%)</title><rect x="0.3092%" y="85" width="0.0790%" height="15" fill="rgb(231,138,38)" fg:x="137" fg:w="35"/><text x="0.5592%" y="95.50"></text></g><g><title>IOKit`IOConnectCallMethod (34 samples, 0.08%)</title><rect x="0.3114%" y="69" width="0.0767%" height="15" fill="rgb(231,145,46)" fg:x="138" fg:w="34"/><text x="0.5614%" y="79.50"></text></g><g><title>IOKit`io_connect_method (34 samples, 0.08%)</title><rect x="0.3114%" y="53" width="0.0767%" height="15" fill="rgb(251,118,11)" fg:x="138" fg:w="34"/><text x="0.5614%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (33 samples, 0.07%)</title><rect x="0.3137%" y="37" width="0.0745%" height="15" fill="rgb(217,147,25)" fg:x="139" fg:w="33"/><text x="0.5637%" y="47.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithPrimaryBuffer:heapIndex:bufferIndex:bufferOffset:length:args:argsSize:] (36 samples, 0.08%)</title><rect x="0.3092%" y="117" width="0.0812%" height="15" fill="rgb(247,81,37)" fg:x="137" fg:w="36"/><text x="0.5592%" y="127.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (36 samples, 0.08%)</title><rect x="0.3092%" y="101" width="0.0812%" height="15" fill="rgb(209,12,38)" fg:x="137" fg:w="36"/><text x="0.5592%" y="111.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (83 samples, 0.19%)</title><rect x="0.2167%" y="149" width="0.1873%" height="15" fill="rgb(227,1,9)" fg:x="96" fg:w="83"/><text x="0.4667%" y="159.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (83 samples, 0.19%)</title><rect x="0.2167%" y="133" width="0.1873%" height="15" fill="rgb(248,47,43)" fg:x="96" fg:w="83"/><text x="0.4667%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalDevice allocBufferSubDataWithLength:options:alignment:heapIndex:bufferIndex:bufferOffset:parentAddress:parentLength:] (6 samples, 0.01%)</title><rect x="0.3904%" y="117" width="0.0135%" height="15" fill="rgb(221,10,30)" fg:x="173" fg:w="6"/><text x="0.6404%" y="127.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::device_create_buffer (90 samples, 0.20%)</title><rect x="0.2076%" y="213" width="0.2031%" height="15" fill="rgb(210,229,1)" fg:x="92" fg:w="90"/><text x="0.4576%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::create_buffer (88 samples, 0.20%)</title><rect x="0.2121%" y="197" width="0.1986%" height="15" fill="rgb(222,148,37)" fg:x="94" fg:w="88"/><text x="0.4621%" y="207.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (87 samples, 0.20%)</title><rect x="0.2144%" y="181" width="0.1963%" height="15" fill="rgb(234,67,33)" fg:x="95" fg:w="87"/><text x="0.4644%" y="191.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (86 samples, 0.19%)</title><rect x="0.2167%" y="165" width="0.1941%" height="15" fill="rgb(247,98,35)" fg:x="96" fg:w="86"/><text x="0.4667%" y="175.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::device_create_buffer (270 samples, 0.61%)</title><rect x="0.2054%" y="245" width="0.6093%" height="15" fill="rgb(247,138,52)" fg:x="91" fg:w="270"/><text x="0.4554%" y="255.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_buffer (270 samples, 0.61%)</title><rect x="0.2054%" y="229" width="0.6093%" height="15" fill="rgb(213,79,30)" fg:x="91" fg:w="270"/><text x="0.4554%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (178 samples, 0.40%)</title><rect x="0.4130%" y="213" width="0.4017%" height="15" fill="rgb(246,177,23)" fg:x="183" fg:w="178"/><text x="0.6630%" y="223.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (288 samples, 0.65%)</title><rect x="0.1670%" y="261" width="0.6500%" height="15" fill="rgb(230,62,27)" fg:x="74" fg:w="288"/><text x="0.4170%" y="271.50"></text></g><g><title>argten-backend-rust`show_image::backend::window::WindowHandle::set_image (325 samples, 0.73%)</title><rect x="0.1647%" y="293" width="0.7335%" height="15" fill="rgb(216,154,8)" fg:x="73" fg:w="325"/><text x="0.4147%" y="303.50"></text></g><g><title>argten-backend-rust`show_image::backend::util::gpu_image::GpuImage::from_data (324 samples, 0.73%)</title><rect x="0.1670%" y="277" width="0.7312%" height="15" fill="rgb(244,35,45)" fg:x="74" fg:w="324"/><text x="0.4170%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.07%)</title><rect x="0.8305%" y="261" width="0.0677%" height="15" fill="rgb(251,115,12)" fg:x="368" fg:w="30"/><text x="1.0805%" y="271.50"></text></g><g><title>argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}} (351 samples, 0.79%)</title><rect x="0.1174%" y="309" width="0.7921%" height="15" fill="rgb(240,54,50)" fg:x="52" fg:w="351"/><text x="0.3674%" y="319.50"></text></g><g><title>argten-backend-rust`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_user_events (352 samples, 0.79%)</title><rect x="0.1174%" y="357" width="0.7944%" height="15" fill="rgb(233,84,52)" fg:x="52" fg:w="352"/><text x="0.3674%" y="367.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run::_{{closure}} (352 samples, 0.79%)</title><rect x="0.1174%" y="341" width="0.7944%" height="15" fill="rgb(207,117,47)" fg:x="52" fg:w="352"/><text x="0.3674%" y="351.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::handle_event (352 samples, 0.79%)</title><rect x="0.1174%" y="325" width="0.7944%" height="15" fill="rgb(249,43,39)" fg:x="52" fg:w="352"/><text x="0.3674%" y="335.50"></text></g><g><title>AGXMetalG13X`AGX::ContextCommon&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::newCommand (5 samples, 0.01%)</title><rect x="0.9727%" y="117" width="0.0113%" height="15" fill="rgb(209,38,44)" fg:x="431" fg:w="5"/><text x="1.2227%" y="127.50"></text></g><g><title>AGXMetalG13X`AGX::RenderContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::beginRenderPass (7 samples, 0.02%)</title><rect x="0.9727%" y="133" width="0.0158%" height="15" fill="rgb(236,212,23)" fg:x="431" fg:w="7"/><text x="1.2227%" y="143.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (19 samples, 0.04%)</title><rect x="0.9501%" y="149" width="0.0429%" height="15" fill="rgb(242,79,21)" fg:x="421" fg:w="19"/><text x="1.2001%" y="159.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (27 samples, 0.06%)</title><rect x="0.9501%" y="181" width="0.0609%" height="15" fill="rgb(211,96,35)" fg:x="421" fg:w="27"/><text x="1.2001%" y="191.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (27 samples, 0.06%)</title><rect x="0.9501%" y="165" width="0.0609%" height="15" fill="rgb(253,215,40)" fg:x="421" fg:w="27"/><text x="1.2001%" y="175.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::render::RenderPassInfo&lt;A&gt;::start (34 samples, 0.08%)</title><rect x="0.9366%" y="213" width="0.0767%" height="15" fill="rgb(211,81,21)" fg:x="415" fg:w="34"/><text x="1.1866%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_render_pass (32 samples, 0.07%)</title><rect x="0.9411%" y="197" width="0.0722%" height="15" fill="rgb(208,190,38)" fg:x="417" fg:w="32"/><text x="1.1911%" y="207.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::render_pass (49 samples, 0.11%)</title><rect x="0.9163%" y="293" width="0.1106%" height="15" fill="rgb(235,213,38)" fg:x="406" fg:w="49"/><text x="1.1663%" y="303.50"></text></g><g><title>argten-backend-rust`core::ptr::drop_in_place&lt;wgpu::RenderPass&gt; (49 samples, 0.11%)</title><rect x="0.9163%" y="277" width="0.1106%" height="15" fill="rgb(237,122,38)" fg:x="406" fg:w="49"/><text x="1.1663%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::command_encoder_end_render_pass (49 samples, 0.11%)</title><rect x="0.9163%" y="261" width="0.1106%" height="15" fill="rgb(244,218,35)" fg:x="406" fg:w="49"/><text x="1.1663%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_end_render_pass (49 samples, 0.11%)</title><rect x="0.9163%" y="245" width="0.1106%" height="15" fill="rgb(240,68,47)" fg:x="406" fg:w="49"/><text x="1.1663%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::render::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (49 samples, 0.11%)</title><rect x="0.9163%" y="229" width="0.1106%" height="15" fill="rgb(210,16,53)" fg:x="406" fg:w="49"/><text x="1.1663%" y="239.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithPrimaryBuffer:heapIndex:bufferIndex:bufferOffset:length:args:argsSize:] (24 samples, 0.05%)</title><rect x="1.0313%" y="133" width="0.0542%" height="15" fill="rgb(235,124,12)" fg:x="457" fg:w="24"/><text x="1.2813%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (24 samples, 0.05%)</title><rect x="1.0313%" y="117" width="0.0542%" height="15" fill="rgb(224,169,11)" fg:x="457" fg:w="24"/><text x="1.2813%" y="127.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (24 samples, 0.05%)</title><rect x="1.0313%" y="101" width="0.0542%" height="15" fill="rgb(250,166,2)" fg:x="457" fg:w="24"/><text x="1.2813%" y="111.50"></text></g><g><title>IOKit`IOConnectCallMethod (24 samples, 0.05%)</title><rect x="1.0313%" y="85" width="0.0542%" height="15" fill="rgb(242,216,29)" fg:x="457" fg:w="24"/><text x="1.2813%" y="95.50"></text></g><g><title>IOKit`io_connect_method (24 samples, 0.05%)</title><rect x="1.0313%" y="69" width="0.0542%" height="15" fill="rgb(230,116,27)" fg:x="457" fg:w="24"/><text x="1.2813%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (24 samples, 0.05%)</title><rect x="1.0313%" y="53" width="0.0542%" height="15" fill="rgb(228,99,48)" fg:x="457" fg:w="24"/><text x="1.2813%" y="63.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (25 samples, 0.06%)</title><rect x="1.0313%" y="165" width="0.0564%" height="15" fill="rgb(253,11,6)" fg:x="457" fg:w="25"/><text x="1.2813%" y="175.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (25 samples, 0.06%)</title><rect x="1.0313%" y="149" width="0.0564%" height="15" fill="rgb(247,143,39)" fg:x="457" fg:w="25"/><text x="1.2813%" y="159.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::device_create_buffer (26 samples, 0.06%)</title><rect x="1.0313%" y="229" width="0.0587%" height="15" fill="rgb(236,97,10)" fg:x="457" fg:w="26"/><text x="1.2813%" y="239.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::create_buffer (26 samples, 0.06%)</title><rect x="1.0313%" y="213" width="0.0587%" height="15" fill="rgb(233,208,19)" fg:x="457" fg:w="26"/><text x="1.2813%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (26 samples, 0.06%)</title><rect x="1.0313%" y="197" width="0.0587%" height="15" fill="rgb(216,164,2)" fg:x="457" fg:w="26"/><text x="1.2813%" y="207.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (26 samples, 0.06%)</title><rect x="1.0313%" y="181" width="0.0587%" height="15" fill="rgb(220,129,5)" fg:x="457" fg:w="26"/><text x="1.2813%" y="191.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (29 samples, 0.07%)</title><rect x="1.0268%" y="277" width="0.0654%" height="15" fill="rgb(242,17,10)" fg:x="455" fg:w="29"/><text x="1.2768%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::device_create_buffer (27 samples, 0.06%)</title><rect x="1.0313%" y="261" width="0.0609%" height="15" fill="rgb(242,107,0)" fg:x="457" fg:w="27"/><text x="1.2813%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_buffer (27 samples, 0.06%)</title><rect x="1.0313%" y="245" width="0.0609%" height="15" fill="rgb(251,28,31)" fg:x="457" fg:w="27"/><text x="1.2813%" y="255.50"></text></g><g><title>argten-backend-rust`show_image::backend::util::uniforms_buffer::UniformsBuffer&lt;T&gt;::update_from (35 samples, 0.08%)</title><rect x="1.0268%" y="293" width="0.0790%" height="15" fill="rgb(233,223,10)" fg:x="455" fg:w="35"/><text x="1.2768%" y="303.50"></text></g><g><title>argten-backend-rust`wgpu::CommandEncoder::copy_buffer_to_buffer (6 samples, 0.01%)</title><rect x="1.0923%" y="277" width="0.0135%" height="15" fill="rgb(215,21,27)" fg:x="484" fg:w="6"/><text x="1.3423%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::command_encoder_copy_buffer_to_buffer (6 samples, 0.01%)</title><rect x="1.0923%" y="261" width="0.0135%" height="15" fill="rgb(232,23,21)" fg:x="484" fg:w="6"/><text x="1.3423%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_copy_buffer_to_buffer (6 samples, 0.01%)</title><rect x="1.0923%" y="245" width="0.0135%" height="15" fill="rgb(244,5,23)" fg:x="484" fg:w="6"/><text x="1.3423%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::transfer::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::command_encoder_copy_buffer_to_buffer (6 samples, 0.01%)</title><rect x="1.0923%" y="229" width="0.0135%" height="15" fill="rgb(226,81,46)" fg:x="484" fg:w="6"/><text x="1.3423%" y="239.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyCommandBuffer commit] (7 samples, 0.02%)</title><rect x="1.1126%" y="213" width="0.0158%" height="15" fill="rgb(247,70,30)" fg:x="493" fg:w="7"/><text x="1.3626%" y="223.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer commit] (5 samples, 0.01%)</title><rect x="1.1171%" y="197" width="0.0113%" height="15" fill="rgb(212,68,19)" fg:x="495" fg:w="5"/><text x="1.3671%" y="207.50"></text></g><g><title>Metal`-[_MTLCommandQueue commitCommandBuffer:wake:] (5 samples, 0.01%)</title><rect x="1.1171%" y="181" width="0.0113%" height="15" fill="rgb(240,187,13)" fg:x="495" fg:w="5"/><text x="1.3671%" y="191.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (5 samples, 0.01%)</title><rect x="1.1171%" y="165" width="0.0113%" height="15" fill="rgb(223,113,26)" fg:x="495" fg:w="5"/><text x="1.3671%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (5 samples, 0.01%)</title><rect x="1.1171%" y="149" width="0.0113%" height="15" fill="rgb(206,192,2)" fg:x="495" fg:w="5"/><text x="1.3671%" y="159.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (8 samples, 0.02%)</title><rect x="1.1126%" y="229" width="0.0181%" height="15" fill="rgb(241,108,4)" fg:x="493" fg:w="8"/><text x="1.3626%" y="239.50"></text></g><g><title>argten-backend-rust`&lt;wgpu_hal::metal::Queue as wgpu_hal::Queue&lt;wgpu_hal::metal::Api&gt;&gt;::submit (9 samples, 0.02%)</title><rect x="1.1126%" y="245" width="0.0203%" height="15" fill="rgb(247,173,49)" fg:x="493" fg:w="9"/><text x="1.3626%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::life::LifetimeTracker&lt;A&gt;::triage_submissions (5 samples, 0.01%)</title><rect x="1.1352%" y="229" width="0.0113%" height="15" fill="rgb(224,114,35)" fg:x="503" fg:w="5"/><text x="1.3852%" y="239.50"></text></g><g><title>CoreFoundation`_CFRelease (54 samples, 0.12%)</title><rect x="1.1532%" y="149" width="0.1219%" height="15" fill="rgb(245,159,27)" fg:x="511" fg:w="54"/><text x="1.4032%" y="159.50"></text></g><g><title>IOKit`iokit_user_client_trap (52 samples, 0.12%)</title><rect x="1.1577%" y="133" width="0.1174%" height="15" fill="rgb(245,172,44)" fg:x="513" fg:w="52"/><text x="1.4077%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource dealloc] (56 samples, 0.13%)</title><rect x="1.1510%" y="165" width="0.1264%" height="15" fill="rgb(236,23,11)" fg:x="510" fg:w="56"/><text x="1.4010%" y="175.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::maintain (64 samples, 0.14%)</title><rect x="1.1352%" y="245" width="0.1444%" height="15" fill="rgb(205,117,38)" fg:x="503" fg:w="64"/><text x="1.3852%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::life::NonReferencedResources&lt;A&gt;::clean (57 samples, 0.13%)</title><rect x="1.1510%" y="229" width="0.1286%" height="15" fill="rgb(237,72,25)" fg:x="510" fg:w="57"/><text x="1.4010%" y="239.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyBuffer dealloc] (57 samples, 0.13%)</title><rect x="1.1510%" y="213" width="0.1286%" height="15" fill="rgb(244,70,9)" fg:x="510" fg:w="57"/><text x="1.4010%" y="223.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer dealloc] (57 samples, 0.13%)</title><rect x="1.1510%" y="197" width="0.1286%" height="15" fill="rgb(217,125,39)" fg:x="510" fg:w="57"/><text x="1.4010%" y="207.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer dealloc] (57 samples, 0.13%)</title><rect x="1.1510%" y="181" width="0.1286%" height="15" fill="rgb(235,36,10)" fg:x="510" fg:w="57"/><text x="1.4010%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu::Queue::submit (80 samples, 0.18%)</title><rect x="1.1103%" y="293" width="0.1805%" height="15" fill="rgb(251,123,47)" fg:x="492" fg:w="80"/><text x="1.3603%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::queue_submit (80 samples, 0.18%)</title><rect x="1.1103%" y="277" width="0.1805%" height="15" fill="rgb(221,13,13)" fg:x="492" fg:w="80"/><text x="1.3603%" y="287.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::queue::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::queue_submit (80 samples, 0.18%)</title><rect x="1.1103%" y="261" width="0.1805%" height="15" fill="rgb(238,131,9)" fg:x="492" fg:w="80"/><text x="1.3603%" y="271.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (6 samples, 0.01%)</title><rect x="1.3067%" y="165" width="0.0135%" height="15" fill="rgb(211,50,8)" fg:x="579" fg:w="6"/><text x="1.5567%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_timedwait_trap (6 samples, 0.01%)</title><rect x="1.3067%" y="149" width="0.0135%" height="15" fill="rgb(245,182,24)" fg:x="579" fg:w="6"/><text x="1.5567%" y="159.50"></text></g><g><title>QuartzCore`CAMetalLayerPrivateNextDrawableLocked(CAMetalLayer*, CAMetalDrawable**, unsigned long*) (12 samples, 0.03%)</title><rect x="1.2954%" y="181" width="0.0271%" height="15" fill="rgb(242,14,37)" fg:x="574" fg:w="12"/><text x="1.5454%" y="191.50"></text></g><g><title>QuartzCore`-[CAMetalLayer nextDrawable] (13 samples, 0.03%)</title><rect x="1.2954%" y="197" width="0.0293%" height="15" fill="rgb(246,228,12)" fg:x="574" fg:w="13"/><text x="1.5454%" y="207.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (14 samples, 0.03%)</title><rect x="1.2954%" y="213" width="0.0316%" height="15" fill="rgb(213,55,15)" fg:x="574" fg:w="14"/><text x="1.5454%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::surface::_&lt;impl wgpu_hal::Surface&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Surface&gt;::acquire_texture (15 samples, 0.03%)</title><rect x="1.2954%" y="229" width="0.0339%" height="15" fill="rgb(209,9,3)" fg:x="574" fg:w="15"/><text x="1.5454%" y="239.50"></text></g><g><title>argten-backend-rust`wgpu::Surface::get_current_texture (18 samples, 0.04%)</title><rect x="1.2909%" y="293" width="0.0406%" height="15" fill="rgb(230,59,30)" fg:x="572" fg:w="18"/><text x="1.5409%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::surface_get_current_texture (17 samples, 0.04%)</title><rect x="1.2931%" y="277" width="0.0384%" height="15" fill="rgb(209,121,21)" fg:x="573" fg:w="17"/><text x="1.5431%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_get_current_texture (17 samples, 0.04%)</title><rect x="1.2931%" y="261" width="0.0384%" height="15" fill="rgb(220,109,13)" fg:x="573" fg:w="17"/><text x="1.5431%" y="271.50"></text></g><g><title>argten-backend-rust`wgpu_core::present::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::surface_get_current_texture (17 samples, 0.04%)</title><rect x="1.2931%" y="245" width="0.0384%" height="15" fill="rgb(232,18,1)" fg:x="573" fg:w="17"/><text x="1.5431%" y="255.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (565 samples, 1.28%)</title><rect x="0.0654%" y="421" width="1.2751%" height="15" fill="rgb(215,41,42)" fg:x="29" fg:w="565"/><text x="0.3154%" y="431.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::observer::control_flow_end_handler (544 samples, 1.23%)</title><rect x="0.1128%" y="405" width="1.2277%" height="15" fill="rgb(224,123,36)" fg:x="50" fg:w="544"/><text x="0.3628%" y="415.50"></text></g><g><title>argten-backend-rust`std::panicking::try (544 samples, 1.23%)</title><rect x="0.1128%" y="389" width="1.2277%" height="15" fill="rgb(240,125,3)" fg:x="50" fg:w="544"/><text x="0.3628%" y="399.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app_state::AppState::cleared (544 samples, 1.23%)</title><rect x="0.1128%" y="373" width="1.2277%" height="15" fill="rgb(205,98,50)" fg:x="50" fg:w="544"/><text x="0.3628%" y="383.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (190 samples, 0.43%)</title><rect x="0.9117%" y="357" width="0.4288%" height="15" fill="rgb(205,185,37)" fg:x="404" fg:w="190"/><text x="1.1617%" y="367.50"></text></g><g><title>argten-backend-rust`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event (190 samples, 0.43%)</title><rect x="0.9117%" y="341" width="0.4288%" height="15" fill="rgb(238,207,15)" fg:x="404" fg:w="190"/><text x="1.1617%" y="351.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run::_{{closure}} (190 samples, 0.43%)</title><rect x="0.9117%" y="325" width="0.4288%" height="15" fill="rgb(213,199,42)" fg:x="404" fg:w="190"/><text x="1.1617%" y="335.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::handle_event (190 samples, 0.43%)</title><rect x="0.9117%" y="309" width="0.4288%" height="15" fill="rgb(235,201,11)" fg:x="404" fg:w="190"/><text x="1.1617%" y="319.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (569 samples, 1.28%)</title><rect x="0.0632%" y="437" width="1.2841%" height="15" fill="rgb(207,46,11)" fg:x="28" fg:w="569"/><text x="0.3132%" y="447.50"></text></g><g><title>CoreFoundation`__CFRunLoopServiceMachPort (5 samples, 0.01%)</title><rect x="1.3563%" y="437" width="0.0113%" height="15" fill="rgb(241,35,35)" fg:x="601" fg:w="5"/><text x="1.6063%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (5 samples, 0.01%)</title><rect x="1.3563%" y="421" width="0.0113%" height="15" fill="rgb(243,32,47)" fg:x="601" fg:w="5"/><text x="1.6063%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (5 samples, 0.01%)</title><rect x="1.3563%" y="405" width="0.0113%" height="15" fill="rgb(247,202,23)" fg:x="601" fg:w="5"/><text x="1.6063%" y="415.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (595 samples, 1.34%)</title><rect x="0.0293%" y="453" width="1.3428%" height="15" fill="rgb(219,102,11)" fg:x="13" fg:w="595"/><text x="0.2793%" y="463.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (596 samples, 1.35%)</title><rect x="0.0293%" y="469" width="1.3450%" height="15" fill="rgb(243,110,44)" fg:x="13" fg:w="596"/><text x="0.2793%" y="479.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run (611 samples, 1.38%)</title><rect x="0.0000%" y="597" width="1.3789%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="611"/><text x="0.2500%" y="607.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::run (611 samples, 1.38%)</title><rect x="0.0000%" y="581" width="1.3789%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="611"/><text x="0.2500%" y="591.50"></text></g><g><title>AppKit`-[NSApplication run] (611 samples, 1.38%)</title><rect x="0.0000%" y="565" width="1.3789%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="611"/><text x="0.2500%" y="575.50"></text></g><g><title>AppKit`-[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (603 samples, 1.36%)</title><rect x="0.0181%" y="549" width="1.3608%" height="15" fill="rgb(217,163,10)" fg:x="8" fg:w="603"/><text x="0.2681%" y="559.50"></text></g><g><title>AppKit`_DPSNextEvent (603 samples, 1.36%)</title><rect x="0.0181%" y="533" width="1.3608%" height="15" fill="rgb(213,25,53)" fg:x="8" fg:w="603"/><text x="0.2681%" y="543.50"></text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (598 samples, 1.35%)</title><rect x="0.0293%" y="517" width="1.3496%" height="15" fill="rgb(252,105,26)" fg:x="13" fg:w="598"/><text x="0.2793%" y="527.50"></text></g><g><title>HIToolbox`ReceiveNextEventCommon (598 samples, 1.35%)</title><rect x="0.0293%" y="501" width="1.3496%" height="15" fill="rgb(220,39,43)" fg:x="13" fg:w="598"/><text x="0.2793%" y="511.50"></text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (598 samples, 1.35%)</title><rect x="0.0293%" y="485" width="1.3496%" height="15" fill="rgb(229,68,48)" fg:x="13" fg:w="598"/><text x="0.2793%" y="495.50"></text></g><g><title>AppKit`+[NSApplication sharedApplication] (9 samples, 0.02%)</title><rect x="1.3789%" y="533" width="0.0203%" height="15" fill="rgb(252,8,32)" fg:x="611" fg:w="9"/><text x="1.6289%" y="543.50"></text></g><g><title>AppKit`-[NSApplication init] (9 samples, 0.02%)</title><rect x="1.3789%" y="517" width="0.0203%" height="15" fill="rgb(223,20,43)" fg:x="611" fg:w="9"/><text x="1.6289%" y="527.50"></text></g><g><title>dyld`start (622 samples, 1.40%)</title><rect x="0.0000%" y="709" width="1.4037%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="622"/><text x="0.2500%" y="719.50"></text></g><g><title>argten-backend-rust`main (622 samples, 1.40%)</title><rect x="0.0000%" y="693" width="1.4037%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="622"/><text x="0.2500%" y="703.50"></text></g><g><title>argten-backend-rust`std::rt::lang_start_internal (622 samples, 1.40%)</title><rect x="0.0000%" y="677" width="1.4037%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="622"/><text x="0.2500%" y="687.50"></text></g><g><title>argten-backend-rust`std::rt::lang_start::_{{closure}} (622 samples, 1.40%)</title><rect x="0.0000%" y="661" width="1.4037%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="622"/><text x="0.2500%" y="671.50"></text></g><g><title>argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace (622 samples, 1.40%)</title><rect x="0.0000%" y="645" width="1.4037%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="622"/><text x="0.2500%" y="655.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::main::main (622 samples, 1.40%)</title><rect x="0.0000%" y="629" width="1.4037%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="622"/><text x="0.2500%" y="639.50"></text></g><g><title>argten-backend-rust`show_image::backend::run_context (622 samples, 1.40%)</title><rect x="0.0000%" y="613" width="1.4037%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="622"/><text x="0.2500%" y="623.50"></text></g><g><title>argten-backend-rust`show_image::backend::initialize_context_or_exit (11 samples, 0.02%)</title><rect x="1.3789%" y="597" width="0.0248%" height="15" fill="rgb(230,49,44)" fg:x="611" fg:w="11"/><text x="1.6289%" y="607.50"></text></g><g><title>argten-backend-rust`show_image::backend::initialize_context (11 samples, 0.02%)</title><rect x="1.3789%" y="581" width="0.0248%" height="15" fill="rgb(229,67,23)" fg:x="611" fg:w="11"/><text x="1.6289%" y="591.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::new (11 samples, 0.02%)</title><rect x="1.3789%" y="565" width="0.0248%" height="15" fill="rgb(249,83,47)" fg:x="611" fg:w="11"/><text x="1.6289%" y="575.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::new (11 samples, 0.02%)</title><rect x="1.3789%" y="549" width="0.0248%" height="15" fill="rgb(215,43,3)" fg:x="611" fg:w="11"/><text x="1.6289%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (214 samples, 0.48%)</title><rect x="1.4195%" y="693" width="0.4830%" height="15" fill="rgb(238,154,13)" fg:x="629" fg:w="214"/><text x="1.6695%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_kevent_worker_thread (5 samples, 0.01%)</title><rect x="1.9047%" y="677" width="0.0113%" height="15" fill="rgb(219,56,2)" fg:x="844" fg:w="5"/><text x="2.1547%" y="687.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_merge (6 samples, 0.01%)</title><rect x="1.9273%" y="661" width="0.0135%" height="15" fill="rgb(233,0,4)" fg:x="854" fg:w="6"/><text x="2.1773%" y="671.50"></text></g><g><title>QuartzCore`layer_presented(_CAImageQueue*, unsigned int, double, double, void*) (6 samples, 0.01%)</title><rect x="1.9476%" y="581" width="0.0135%" height="15" fill="rgb(235,30,7)" fg:x="863" fg:w="6"/><text x="2.1976%" y="591.50"></text></g><g><title>QuartzCore`invoke_presented_callback(void*) (7 samples, 0.02%)</title><rect x="1.9476%" y="597" width="0.0158%" height="15" fill="rgb(250,79,13)" fg:x="863" fg:w="7"/><text x="2.1976%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (12 samples, 0.03%)</title><rect x="1.9476%" y="613" width="0.0271%" height="15" fill="rgb(211,146,34)" fg:x="863" fg:w="12"/><text x="2.1976%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (11 samples, 0.02%)</title><rect x="1.9950%" y="373" width="0.0248%" height="15" fill="rgb(228,22,38)" fg:x="884" fg:w="11"/><text x="2.2450%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (11 samples, 0.02%)</title><rect x="1.9950%" y="357" width="0.0248%" height="15" fill="rgb(235,168,5)" fg:x="884" fg:w="11"/><text x="2.2450%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (11 samples, 0.02%)</title><rect x="1.9950%" y="341" width="0.0248%" height="15" fill="rgb(221,155,16)" fg:x="884" fg:w="11"/><text x="2.2450%" y="351.50"></text></g><g><title>QuartzCore`CAImageQueuePing_ (12 samples, 0.03%)</title><rect x="1.9950%" y="389" width="0.0271%" height="15" fill="rgb(215,215,53)" fg:x="884" fg:w="12"/><text x="2.2450%" y="399.50"></text></g><g><title>QuartzCore`layer_private_present_impl(_CAMetalLayerPrivate*, CAMetalDrawable*, double, unsigned int) (16 samples, 0.04%)</title><rect x="1.9927%" y="421" width="0.0361%" height="15" fill="rgb(223,4,10)" fg:x="883" fg:w="16"/><text x="2.2427%" y="431.50"></text></g><g><title>QuartzCore`CAImageQueueInsertImage_ (16 samples, 0.04%)</title><rect x="1.9927%" y="405" width="0.0361%" height="15" fill="rgb(234,103,6)" fg:x="883" fg:w="16"/><text x="2.2427%" y="415.50"></text></g><g><title>QuartzCore`-[CAMetalDrawable present] (18 samples, 0.04%)</title><rect x="1.9905%" y="437" width="0.0406%" height="15" fill="rgb(227,97,0)" fg:x="882" fg:w="18"/><text x="2.2405%" y="447.50"></text></g><g><title>Metal`__45-[_MTLCommandBuffer presentDrawable:options:]_block_invoke (21 samples, 0.05%)</title><rect x="1.9860%" y="453" width="0.0474%" height="15" fill="rgb(234,150,53)" fg:x="880" fg:w="21"/><text x="2.2360%" y="463.50"></text></g><g><title>Metal`MTLDispatchListApply (22 samples, 0.05%)</title><rect x="1.9860%" y="469" width="0.0496%" height="15" fill="rgb(228,201,54)" fg:x="880" fg:w="22"/><text x="2.2360%" y="479.50"></text></g><g><title>Metal`-[_MTLCommandBuffer didScheduleWithStartTime:endTime:error:] (24 samples, 0.05%)</title><rect x="1.9860%" y="485" width="0.0542%" height="15" fill="rgb(222,22,37)" fg:x="880" fg:w="24"/><text x="2.2360%" y="495.50"></text></g><g><title>Metal`-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (6 samples, 0.01%)</title><rect x="2.0401%" y="485" width="0.0135%" height="15" fill="rgb(237,53,32)" fg:x="904" fg:w="6"/><text x="2.2901%" y="495.50"></text></g><g><title>libsystem_blocks.dylib`_Block_release (6 samples, 0.01%)</title><rect x="2.0559%" y="485" width="0.0135%" height="15" fill="rgb(233,25,53)" fg:x="911" fg:w="6"/><text x="2.3059%" y="495.50"></text></g><g><title>IOGPU`IOGPUNotificationQueueDispatchAvailableCompletionNotifications (41 samples, 0.09%)</title><rect x="1.9814%" y="501" width="0.0925%" height="15" fill="rgb(210,40,34)" fg:x="878" fg:w="41"/><text x="2.2314%" y="511.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (48 samples, 0.11%)</title><rect x="1.9747%" y="613" width="0.1083%" height="15" fill="rgb(241,220,44)" fg:x="875" fg:w="48"/><text x="2.2247%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (48 samples, 0.11%)</title><rect x="1.9747%" y="597" width="0.1083%" height="15" fill="rgb(235,28,35)" fg:x="875" fg:w="48"/><text x="2.2247%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_invoke (48 samples, 0.11%)</title><rect x="1.9747%" y="581" width="0.1083%" height="15" fill="rgb(210,56,17)" fg:x="875" fg:w="48"/><text x="2.2247%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (48 samples, 0.11%)</title><rect x="1.9747%" y="565" width="0.1083%" height="15" fill="rgb(224,130,29)" fg:x="875" fg:w="48"/><text x="2.2247%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_invoke (47 samples, 0.11%)</title><rect x="1.9769%" y="549" width="0.1061%" height="15" fill="rgb(235,212,8)" fg:x="876" fg:w="47"/><text x="2.2269%" y="559.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout4 (46 samples, 0.10%)</title><rect x="1.9792%" y="533" width="0.1038%" height="15" fill="rgb(223,33,50)" fg:x="877" fg:w="46"/><text x="2.2292%" y="543.50"></text></g><g><title>IOGPU`__IOGPUNotificationQueueSetDispatchQueue_block_invoke (46 samples, 0.10%)</title><rect x="1.9792%" y="517" width="0.1038%" height="15" fill="rgb(219,149,13)" fg:x="877" fg:w="46"/><text x="2.2292%" y="527.50"></text></g><g><title>IOGPU`IOGPUCommandQueueSubmitCommandBuffers (248 samples, 0.56%)</title><rect x="2.1056%" y="501" width="0.5597%" height="15" fill="rgb(250,156,29)" fg:x="933" fg:w="248"/><text x="2.3556%" y="511.50"></text></g><g><title>IOKit`IOConnectCallMethod (248 samples, 0.56%)</title><rect x="2.1056%" y="485" width="0.5597%" height="15" fill="rgb(216,193,19)" fg:x="933" fg:w="248"/><text x="2.3556%" y="495.50"></text></g><g><title>IOKit`io_connect_method (248 samples, 0.56%)</title><rect x="2.1056%" y="469" width="0.5597%" height="15" fill="rgb(216,135,14)" fg:x="933" fg:w="248"/><text x="2.3556%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (248 samples, 0.56%)</title><rect x="2.1056%" y="453" width="0.5597%" height="15" fill="rgb(241,47,5)" fg:x="933" fg:w="248"/><text x="2.3556%" y="463.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (259 samples, 0.58%)</title><rect x="2.0920%" y="549" width="0.5845%" height="15" fill="rgb(233,42,35)" fg:x="927" fg:w="259"/><text x="2.3420%" y="559.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (256 samples, 0.58%)</title><rect x="2.0988%" y="533" width="0.5777%" height="15" fill="rgb(231,13,6)" fg:x="930" fg:w="256"/><text x="2.3488%" y="543.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (256 samples, 0.58%)</title><rect x="2.0988%" y="517" width="0.5777%" height="15" fill="rgb(207,181,40)" fg:x="930" fg:w="256"/><text x="2.3488%" y="527.50"></text></g><g><title>IOKit`iokit_user_client_trap (5 samples, 0.01%)</title><rect x="2.6653%" y="501" width="0.0113%" height="15" fill="rgb(254,173,49)" fg:x="1181" fg:w="5"/><text x="2.9153%" y="511.50"></text></g><g><title>QuartzCore`_XImageQueueDidPresent (6 samples, 0.01%)</title><rect x="2.6901%" y="533" width="0.0135%" height="15" fill="rgb(221,1,38)" fg:x="1192" fg:w="6"/><text x="2.9401%" y="543.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (6 samples, 0.01%)</title><rect x="2.6901%" y="517" width="0.0135%" height="15" fill="rgb(206,124,46)" fg:x="1192" fg:w="6"/><text x="2.9401%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (6 samples, 0.01%)</title><rect x="2.6901%" y="501" width="0.0135%" height="15" fill="rgb(249,21,11)" fg:x="1192" fg:w="6"/><text x="2.9401%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (12 samples, 0.03%)</title><rect x="2.7036%" y="533" width="0.0271%" height="15" fill="rgb(222,201,40)" fg:x="1198" fg:w="12"/><text x="2.9536%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (12 samples, 0.03%)</title><rect x="2.7036%" y="517" width="0.0271%" height="15" fill="rgb(235,61,29)" fg:x="1198" fg:w="12"/><text x="2.9536%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (12 samples, 0.03%)</title><rect x="2.7036%" y="501" width="0.0271%" height="15" fill="rgb(219,207,3)" fg:x="1198" fg:w="12"/><text x="2.9536%" y="511.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (286 samples, 0.65%)</title><rect x="2.0875%" y="613" width="0.6454%" height="15" fill="rgb(222,56,46)" fg:x="925" fg:w="286"/><text x="2.3375%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_latch_and_call (285 samples, 0.64%)</title><rect x="2.0898%" y="597" width="0.6432%" height="15" fill="rgb(239,76,54)" fg:x="926" fg:w="285"/><text x="2.3398%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_continuation_pop (285 samples, 0.64%)</title><rect x="2.0898%" y="581" width="0.6432%" height="15" fill="rgb(231,124,27)" fg:x="926" fg:w="285"/><text x="2.3398%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (285 samples, 0.64%)</title><rect x="2.0898%" y="565" width="0.6432%" height="15" fill="rgb(249,195,6)" fg:x="926" fg:w="285"/><text x="2.3398%" y="575.50"></text></g><g><title>QuartzCore`CARenderServerProcessClientMessage (24 samples, 0.05%)</title><rect x="2.6788%" y="549" width="0.0542%" height="15" fill="rgb(237,174,47)" fg:x="1187" fg:w="24"/><text x="2.9288%" y="559.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (350 samples, 0.79%)</title><rect x="1.9453%" y="629" width="0.7899%" height="15" fill="rgb(206,201,31)" fg:x="862" fg:w="350"/><text x="2.1953%" y="639.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (591 samples, 1.33%)</title><rect x="1.4037%" y="709" width="1.3338%" height="15" fill="rgb(231,57,52)" fg:x="622" fg:w="591"/><text x="1.6537%" y="719.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (370 samples, 0.84%)</title><rect x="1.9025%" y="693" width="0.8350%" height="15" fill="rgb(248,177,22)" fg:x="843" fg:w="370"/><text x="2.1525%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (361 samples, 0.81%)</title><rect x="1.9228%" y="677" width="0.8147%" height="15" fill="rgb(215,211,37)" fg:x="852" fg:w="361"/><text x="2.1728%" y="687.50"></text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain_deferred_wlh (353 samples, 0.80%)</title><rect x="1.9408%" y="661" width="0.7966%" height="15" fill="rgb(241,128,51)" fg:x="860" fg:w="353"/><text x="2.1908%" y="671.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (351 samples, 0.79%)</title><rect x="1.9453%" y="645" width="0.7921%" height="15" fill="rgb(227,165,31)" fg:x="862" fg:w="351"/><text x="2.1953%" y="655.50"></text></g><g><title>argten-backend-rust`image::dynimage::DynamicImage::resize_exact (17 samples, 0.04%)</title><rect x="2.7420%" y="597" width="0.0384%" height="15" fill="rgb(228,167,24)" fg:x="1215" fg:w="17"/><text x="2.9920%" y="607.50"></text></g><g><title>argten-backend-rust`image::imageops::sample::resize (17 samples, 0.04%)</title><rect x="2.7420%" y="581" width="0.0384%" height="15" fill="rgb(228,143,12)" fg:x="1215" fg:w="17"/><text x="2.9920%" y="591.50"></text></g><g><title>argten-backend-rust`image::imageops::sample::vertical_sample (14 samples, 0.03%)</title><rect x="2.7488%" y="565" width="0.0316%" height="15" fill="rgb(249,149,8)" fg:x="1218" fg:w="14"/><text x="2.9988%" y="575.50"></text></g><g><title>argten-backend-rust`zune_jpeg::mcu_prog::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::parse_entropy_coded_data (17 samples, 0.04%)</title><rect x="2.7916%" y="533" width="0.0384%" height="15" fill="rgb(243,35,44)" fg:x="1237" fg:w="17"/><text x="3.0416%" y="543.50"></text></g><g><title>argten-backend-rust`zune_jpeg::bitstream::BitStream::decode_mcu_ac_refine (15 samples, 0.03%)</title><rect x="2.7961%" y="517" width="0.0339%" height="15" fill="rgb(246,89,9)" fg:x="1239" fg:w="15"/><text x="3.0461%" y="527.50"></text></g><g><title>argten-backend-rust`image::dynimage::decoder_to_image (23 samples, 0.05%)</title><rect x="2.7803%" y="597" width="0.0519%" height="15" fill="rgb(233,213,13)" fg:x="1232" fg:w="23"/><text x="3.0303%" y="607.50"></text></g><g><title>argten-backend-rust`image::image::decoder_to_vec (23 samples, 0.05%)</title><rect x="2.7803%" y="581" width="0.0519%" height="15" fill="rgb(233,141,41)" fg:x="1232" fg:w="23"/><text x="3.0303%" y="591.50"></text></g><g><title>argten-backend-rust`&lt;image::codecs::jpeg::decoder::JpegDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (23 samples, 0.05%)</title><rect x="2.7803%" y="565" width="0.0519%" height="15" fill="rgb(239,167,4)" fg:x="1232" fg:w="23"/><text x="3.0303%" y="575.50"></text></g><g><title>argten-backend-rust`zune_jpeg::mcu_prog::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::decode_mcu_ycbcr_progressive (23 samples, 0.05%)</title><rect x="2.7803%" y="549" width="0.0519%" height="15" fill="rgb(209,217,16)" fg:x="1232" fg:w="23"/><text x="3.0303%" y="559.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::engine::Engine::init (41 samples, 0.09%)</title><rect x="2.7420%" y="613" width="0.0925%" height="15" fill="rgb(219,88,35)" fg:x="1215" fg:w="41"/><text x="2.9920%" y="623.50"></text></g><g><title>argten-backend-rust`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="2.8345%" y="597" width="0.0158%" height="15" fill="rgb(220,193,23)" fg:x="1256" fg:w="7"/><text x="3.0845%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.01%)</title><rect x="2.8390%" y="581" width="0.0113%" height="15" fill="rgb(230,90,52)" fg:x="1258" fg:w="5"/><text x="3.0890%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.01%)</title><rect x="2.8390%" y="565" width="0.0113%" height="15" fill="rgb(252,106,19)" fg:x="1258" fg:w="5"/><text x="3.0890%" y="575.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$free (30 samples, 0.07%)</title><rect x="2.8503%" y="597" width="0.0677%" height="15" fill="rgb(206,74,20)" fg:x="1263" fg:w="30"/><text x="3.1003%" y="607.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="2.9180%" y="597" width="0.0226%" height="15" fill="rgb(230,138,44)" fg:x="1293" fg:w="10"/><text x="3.1680%" y="607.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$memcpy (5 samples, 0.01%)</title><rect x="2.9406%" y="597" width="0.0113%" height="15" fill="rgb(235,182,43)" fg:x="1303" fg:w="5"/><text x="3.1906%" y="607.50"></text></g><g><title>argten-backend-rust`__rdl_alloc (8 samples, 0.02%)</title><rect x="2.9519%" y="597" width="0.0181%" height="15" fill="rgb(242,16,51)" fg:x="1308" fg:w="8"/><text x="3.2019%" y="607.50"></text></g><g><title>argten-backend-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.01%)</title><rect x="10.8957%" y="581" width="0.0113%" height="15" fill="rgb(248,9,4)" fg:x="4828" fg:w="5"/><text x="11.1457%" y="591.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$free (182 samples, 0.41%)</title><rect x="10.9070%" y="581" width="0.4107%" height="15" fill="rgb(210,31,22)" fg:x="4833" fg:w="182"/><text x="11.1570%" y="591.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$malloc (47 samples, 0.11%)</title><rect x="11.3177%" y="581" width="0.1061%" height="15" fill="rgb(239,54,39)" fg:x="5015" fg:w="47"/><text x="11.5677%" y="591.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$memcpy (48 samples, 0.11%)</title><rect x="11.4238%" y="581" width="0.1083%" height="15" fill="rgb(230,99,41)" fg:x="5062" fg:w="48"/><text x="11.6738%" y="591.50"></text></g><g><title>argten-backend-rust`__rdl_alloc (45 samples, 0.10%)</title><rect x="11.5321%" y="581" width="0.1016%" height="15" fill="rgb(253,106,12)" fg:x="5110" fg:w="45"/><text x="11.7821%" y="591.50"></text></g><g><title>argten-backend-rust`__rdl_dealloc (10 samples, 0.02%)</title><rect x="11.6337%" y="581" width="0.0226%" height="15" fill="rgb(213,46,41)" fg:x="5155" fg:w="10"/><text x="11.8837%" y="591.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.05%)</title><rect x="11.6562%" y="581" width="0.0451%" height="15" fill="rgb(215,133,35)" fg:x="5165" fg:w="20"/><text x="11.9062%" y="591.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.02%)</title><rect x="11.7014%" y="581" width="0.0203%" height="15" fill="rgb(213,28,5)" fg:x="5185" fg:w="9"/><text x="11.9514%" y="591.50"></text></g><g><title>argten-backend-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 0.07%)</title><rect x="52.1225%" y="565" width="0.0700%" height="15" fill="rgb(215,77,49)" fg:x="23096" fg:w="31"/><text x="52.3725%" y="575.50"></text></g><g><title>argten-backend-rust`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.05%)</title><rect x="52.1473%" y="549" width="0.0451%" height="15" fill="rgb(248,100,22)" fg:x="23107" fg:w="20"/><text x="52.3973%" y="559.50"></text></g><g><title>argten-backend-rust`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.03%)</title><rect x="52.3572%" y="549" width="0.0293%" height="15" fill="rgb(208,67,9)" fg:x="23200" fg:w="13"/><text x="52.6072%" y="559.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$malloc (6 samples, 0.01%)</title><rect x="52.4159%" y="533" width="0.0135%" height="15" fill="rgb(219,133,21)" fg:x="23226" fg:w="6"/><text x="52.6659%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (17 samples, 0.04%)</title><rect x="52.4520%" y="501" width="0.0384%" height="15" fill="rgb(246,46,29)" fg:x="23242" fg:w="17"/><text x="52.7020%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (71 samples, 0.16%)</title><rect x="52.4904%" y="501" width="0.1602%" height="15" fill="rgb(246,185,52)" fg:x="23259" fg:w="71"/><text x="52.7404%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (23 samples, 0.05%)</title><rect x="52.6867%" y="485" width="0.0519%" height="15" fill="rgb(252,136,11)" fg:x="23346" fg:w="23"/><text x="52.9367%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (8 samples, 0.02%)</title><rect x="52.7724%" y="469" width="0.0181%" height="15" fill="rgb(219,138,53)" fg:x="23384" fg:w="8"/><text x="53.0224%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (181 samples, 0.41%)</title><rect x="52.4407%" y="517" width="0.4085%" height="15" fill="rgb(211,51,23)" fg:x="23237" fg:w="181"/><text x="52.6907%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (88 samples, 0.20%)</title><rect x="52.6506%" y="501" width="0.1986%" height="15" fill="rgb(247,221,28)" fg:x="23330" fg:w="88"/><text x="52.9006%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (49 samples, 0.11%)</title><rect x="52.7386%" y="485" width="0.1106%" height="15" fill="rgb(251,222,45)" fg:x="23369" fg:w="49"/><text x="52.9886%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (26 samples, 0.06%)</title><rect x="52.7905%" y="469" width="0.0587%" height="15" fill="rgb(217,162,53)" fg:x="23392" fg:w="26"/><text x="53.0405%" y="479.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::finish_grow (184 samples, 0.42%)</title><rect x="52.4362%" y="533" width="0.4152%" height="15" fill="rgb(229,93,14)" fg:x="23235" fg:w="184"/><text x="52.6862%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="52.8514%" y="533" width="0.0248%" height="15" fill="rgb(209,67,49)" fg:x="23419" fg:w="11"/><text x="53.1014%" y="543.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (218 samples, 0.49%)</title><rect x="52.3933%" y="549" width="0.4920%" height="15" fill="rgb(213,87,29)" fg:x="23216" fg:w="218"/><text x="52.6433%" y="559.50"></text></g><g><title>argten-backend-rust`core::hash::BuildHasher::hash_one (27 samples, 0.06%)</title><rect x="52.8875%" y="549" width="0.0609%" height="15" fill="rgb(205,151,52)" fg:x="23435" fg:w="27"/><text x="53.1375%" y="559.50"></text></g><g><title>argten-backend-rust`core::slice::sort::insertion_sort_shift_left (31 samples, 0.07%)</title><rect x="52.9485%" y="549" width="0.0700%" height="15" fill="rgb(253,215,39)" fg:x="23462" fg:w="31"/><text x="53.1985%" y="559.50"></text></g><g><title>argten-backend-rust`core::slice::sort::merge_sort (5 samples, 0.01%)</title><rect x="53.0184%" y="549" width="0.0113%" height="15" fill="rgb(221,220,41)" fg:x="23493" fg:w="5"/><text x="53.2684%" y="559.50"></text></g><g><title>argten-backend-rust`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.02%)</title><rect x="53.0297%" y="549" width="0.0158%" height="15" fill="rgb(218,133,21)" fg:x="23498" fg:w="7"/><text x="53.2797%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.02%)</title><rect x="53.0568%" y="549" width="0.0158%" height="15" fill="rgb(221,193,43)" fg:x="23510" fg:w="7"/><text x="53.3068%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.02%)</title><rect x="53.0726%" y="549" width="0.0158%" height="15" fill="rgb(240,128,52)" fg:x="23517" fg:w="7"/><text x="53.3226%" y="559.50"></text></g><g><title>argten-backend-rust`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (402 samples, 0.91%)</title><rect x="52.1925%" y="565" width="0.9072%" height="15" fill="rgb(253,114,12)" fg:x="23127" fg:w="402"/><text x="52.4425%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.01%)</title><rect x="53.0884%" y="549" width="0.0113%" height="15" fill="rgb(215,223,47)" fg:x="23524" fg:w="5"/><text x="53.3384%" y="559.50"></text></g><g><title>argten-backend-rust`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (158 samples, 0.36%)</title><rect x="53.1087%" y="565" width="0.3566%" height="15" fill="rgb(248,225,23)" fg:x="23533" fg:w="158"/><text x="53.3587%" y="575.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$malloc (37 samples, 0.08%)</title><rect x="53.8580%" y="549" width="0.0835%" height="15" fill="rgb(250,108,0)" fg:x="23865" fg:w="37"/><text x="54.1080%" y="559.50"></text></g><g><title>argten-backend-rust`__rdl_alloc (49 samples, 0.11%)</title><rect x="53.9415%" y="549" width="0.1106%" height="15" fill="rgb(228,208,7)" fg:x="23902" fg:w="49"/><text x="54.1915%" y="559.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::finish_grow (149 samples, 0.34%)</title><rect x="54.0520%" y="549" width="0.3363%" height="15" fill="rgb(244,45,10)" fg:x="23951" fg:w="149"/><text x="54.3020%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (385 samples, 0.87%)</title><rect x="54.3883%" y="549" width="0.8689%" height="15" fill="rgb(207,125,25)" fg:x="24100" fg:w="385"/><text x="54.6383%" y="559.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,239 samples, 2.80%)</title><rect x="53.4924%" y="565" width="2.7961%" height="15" fill="rgb(210,195,18)" fg:x="23703" fg:w="1239"/><text x="53.7424%" y="575.50">ar..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (457 samples, 1.03%)</title><rect x="55.2572%" y="549" width="1.0313%" height="15" fill="rgb(249,80,12)" fg:x="24485" fg:w="457"/><text x="55.5072%" y="559.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$realloc (8 samples, 0.02%)</title><rect x="56.3562%" y="549" width="0.0181%" height="15" fill="rgb(221,65,9)" fg:x="24972" fg:w="8"/><text x="56.6062%" y="559.50"></text></g><g><title>argten-backend-rust`__rdl_realloc (8 samples, 0.02%)</title><rect x="56.3833%" y="549" width="0.0181%" height="15" fill="rgb(235,49,36)" fg:x="24984" fg:w="8"/><text x="56.6333%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.02%)</title><rect x="56.6473%" y="501" width="0.0158%" height="15" fill="rgb(225,32,20)" fg:x="25101" fg:w="7"/><text x="56.8973%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.02%)</title><rect x="56.6834%" y="501" width="0.0203%" height="15" fill="rgb(215,141,46)" fg:x="25117" fg:w="9"/><text x="56.9334%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.03%)</title><rect x="56.7038%" y="501" width="0.0339%" height="15" fill="rgb(250,160,47)" fg:x="25126" fg:w="15"/><text x="56.9538%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (38 samples, 0.09%)</title><rect x="56.7850%" y="485" width="0.0858%" height="15" fill="rgb(216,222,40)" fg:x="25162" fg:w="38"/><text x="57.0350%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (5 samples, 0.01%)</title><rect x="56.8730%" y="469" width="0.0113%" height="15" fill="rgb(234,217,39)" fg:x="25201" fg:w="5"/><text x="57.1230%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.01%)</title><rect x="56.9001%" y="453" width="0.0113%" height="15" fill="rgb(207,178,40)" fg:x="25213" fg:w="5"/><text x="57.1501%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.08%)</title><rect x="56.8708%" y="485" width="0.0790%" height="15" fill="rgb(221,136,13)" fg:x="25200" fg:w="35"/><text x="57.1208%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.07%)</title><rect x="56.8843%" y="469" width="0.0654%" height="15" fill="rgb(249,199,10)" fg:x="25206" fg:w="29"/><text x="57.1343%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (17 samples, 0.04%)</title><rect x="56.9114%" y="453" width="0.0384%" height="15" fill="rgb(249,222,13)" fg:x="25218" fg:w="17"/><text x="57.1614%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (105 samples, 0.24%)</title><rect x="56.7376%" y="501" width="0.2370%" height="15" fill="rgb(244,185,38)" fg:x="25141" fg:w="105"/><text x="56.9876%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.02%)</title><rect x="56.9543%" y="485" width="0.0203%" height="15" fill="rgb(236,202,9)" fg:x="25237" fg:w="9"/><text x="57.2043%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (5 samples, 0.01%)</title><rect x="56.9746%" y="501" width="0.0113%" height="15" fill="rgb(250,229,37)" fg:x="25246" fg:w="5"/><text x="57.2246%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (9 samples, 0.02%)</title><rect x="56.9859%" y="501" width="0.0203%" height="15" fill="rgb(206,174,23)" fg:x="25251" fg:w="9"/><text x="57.2359%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (14 samples, 0.03%)</title><rect x="57.1032%" y="485" width="0.0316%" height="15" fill="rgb(211,33,43)" fg:x="25303" fg:w="14"/><text x="57.3532%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.01%)</title><rect x="57.1348%" y="485" width="0.0113%" height="15" fill="rgb(245,58,50)" fg:x="25317" fg:w="5"/><text x="57.3848%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.05%)</title><rect x="57.3108%" y="469" width="0.0451%" height="15" fill="rgb(244,68,36)" fg:x="25395" fg:w="20"/><text x="57.5608%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free_small (113 samples, 0.26%)</title><rect x="57.1461%" y="485" width="0.2550%" height="15" fill="rgb(232,229,15)" fg:x="25322" fg:w="113"/><text x="57.3961%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (14 samples, 0.03%)</title><rect x="57.3695%" y="469" width="0.0316%" height="15" fill="rgb(254,30,23)" fg:x="25421" fg:w="14"/><text x="57.6195%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.01%)</title><rect x="57.4981%" y="453" width="0.0113%" height="15" fill="rgb(235,160,14)" fg:x="25478" fg:w="5"/><text x="57.7481%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (55 samples, 0.12%)</title><rect x="57.4011%" y="485" width="0.1241%" height="15" fill="rgb(212,155,44)" fg:x="25435" fg:w="55"/><text x="57.6511%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (32 samples, 0.07%)</title><rect x="57.4530%" y="469" width="0.0722%" height="15" fill="rgb(226,2,50)" fg:x="25458" fg:w="32"/><text x="57.7030%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.02%)</title><rect x="57.5094%" y="453" width="0.0158%" height="15" fill="rgb(234,177,6)" fg:x="25483" fg:w="7"/><text x="57.7594%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`medium_try_realloc_in_place (11 samples, 0.02%)</title><rect x="57.5365%" y="485" width="0.0248%" height="15" fill="rgb(217,24,9)" fg:x="25495" fg:w="11"/><text x="57.7865%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.01%)</title><rect x="57.5681%" y="485" width="0.0135%" height="15" fill="rgb(220,13,46)" fg:x="25509" fg:w="6"/><text x="57.8181%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_size (16 samples, 0.04%)</title><rect x="57.5816%" y="485" width="0.0361%" height="15" fill="rgb(239,221,27)" fg:x="25515" fg:w="16"/><text x="57.8316%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="57.7441%" y="469" width="0.0248%" height="15" fill="rgb(222,198,25)" fg:x="25587" fg:w="11"/><text x="57.9941%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (72 samples, 0.16%)</title><rect x="57.6177%" y="485" width="0.1625%" height="15" fill="rgb(211,99,13)" fg:x="25531" fg:w="72"/><text x="57.8677%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (6 samples, 0.01%)</title><rect x="57.8321%" y="437" width="0.0135%" height="15" fill="rgb(232,111,31)" fg:x="25626" fg:w="6"/><text x="58.0821%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (15 samples, 0.03%)</title><rect x="57.8163%" y="469" width="0.0339%" height="15" fill="rgb(245,82,37)" fg:x="25619" fg:w="15"/><text x="58.0663%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (10 samples, 0.02%)</title><rect x="57.8276%" y="453" width="0.0226%" height="15" fill="rgb(227,149,46)" fg:x="25624" fg:w="10"/><text x="58.0776%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (24 samples, 0.05%)</title><rect x="57.8502%" y="469" width="0.0542%" height="15" fill="rgb(218,36,50)" fg:x="25634" fg:w="24"/><text x="58.1002%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (14 samples, 0.03%)</title><rect x="58.0510%" y="437" width="0.0316%" height="15" fill="rgb(226,80,48)" fg:x="25723" fg:w="14"/><text x="58.3010%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="58.0826%" y="437" width="0.0135%" height="15" fill="rgb(238,224,15)" fg:x="25737" fg:w="6"/><text x="58.3326%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (107 samples, 0.24%)</title><rect x="57.9111%" y="469" width="0.2415%" height="15" fill="rgb(241,136,10)" fg:x="25661" fg:w="107"/><text x="58.1611%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (88 samples, 0.20%)</title><rect x="57.9540%" y="453" width="0.1986%" height="15" fill="rgb(208,32,45)" fg:x="25680" fg:w="88"/><text x="58.2040%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (25 samples, 0.06%)</title><rect x="58.0962%" y="437" width="0.0564%" height="15" fill="rgb(207,135,9)" fg:x="25743" fg:w="25"/><text x="58.3462%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (172 samples, 0.39%)</title><rect x="57.7802%" y="485" width="0.3882%" height="15" fill="rgb(206,86,44)" fg:x="25603" fg:w="172"/><text x="58.0302%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.02%)</title><rect x="58.1526%" y="469" width="0.0158%" height="15" fill="rgb(245,177,15)" fg:x="25768" fg:w="7"/><text x="58.4026%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.07%)</title><rect x="58.1684%" y="485" width="0.0722%" height="15" fill="rgb(206,64,50)" fg:x="25775" fg:w="32"/><text x="58.4184%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="58.2180%" y="469" width="0.0226%" height="15" fill="rgb(234,36,40)" fg:x="25797" fg:w="10"/><text x="58.4680%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (553 samples, 1.25%)</title><rect x="57.0152%" y="501" width="1.2480%" height="15" fill="rgb(213,64,8)" fg:x="25264" fg:w="553"/><text x="57.2652%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.01%)</title><rect x="58.2519%" y="485" width="0.0113%" height="15" fill="rgb(210,75,36)" fg:x="25812" fg:w="5"/><text x="58.5019%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.01%)</title><rect x="58.2632%" y="501" width="0.0113%" height="15" fill="rgb(229,88,21)" fg:x="25817" fg:w="5"/><text x="58.5132%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2,017 samples, 4.55%)</title><rect x="56.5187%" y="517" width="4.5519%" height="15" fill="rgb(252,204,47)" fg:x="25044" fg:w="2017"/><text x="56.7687%" y="527.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,238 samples, 2.79%)</title><rect x="58.2767%" y="501" width="2.7939%" height="15" fill="rgb(208,77,27)" fg:x="25823" fg:w="1238"/><text x="58.5267%" y="511.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (17 samples, 0.04%)</title><rect x="61.0774%" y="517" width="0.0384%" height="15" fill="rgb(221,76,26)" fg:x="27064" fg:w="17"/><text x="61.3274%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_size (32 samples, 0.07%)</title><rect x="61.1158%" y="517" width="0.0722%" height="15" fill="rgb(225,139,18)" fg:x="27081" fg:w="32"/><text x="61.3658%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.02%)</title><rect x="61.1880%" y="517" width="0.0226%" height="15" fill="rgb(230,137,11)" fg:x="27113" fg:w="10"/><text x="61.4380%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2,167 samples, 4.89%)</title><rect x="56.4307%" y="533" width="4.8904%" height="15" fill="rgb(212,28,1)" fg:x="25005" fg:w="2167"/><text x="56.6807%" y="543.50">libsys..</text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.11%)</title><rect x="61.2105%" y="517" width="0.1106%" height="15" fill="rgb(248,164,17)" fg:x="27123" fg:w="49"/><text x="61.4605%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (41 samples, 0.09%)</title><rect x="61.2286%" y="501" width="0.0925%" height="15" fill="rgb(222,171,42)" fg:x="27131" fg:w="41"/><text x="61.4786%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.06%)</title><rect x="61.3211%" y="533" width="0.0632%" height="15" fill="rgb(243,84,45)" fg:x="27172" fg:w="28"/><text x="61.5711%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (28 samples, 0.06%)</title><rect x="61.3978%" y="517" width="0.0632%" height="15" fill="rgb(252,49,23)" fg:x="27206" fg:w="28"/><text x="61.6478%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.02%)</title><rect x="61.4836%" y="501" width="0.0226%" height="15" fill="rgb(215,19,7)" fg:x="27244" fg:w="10"/><text x="61.7336%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (7 samples, 0.02%)</title><rect x="61.5310%" y="485" width="0.0158%" height="15" fill="rgb(238,81,41)" fg:x="27265" fg:w="7"/><text x="61.7810%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (87 samples, 0.20%)</title><rect x="61.3843%" y="533" width="0.1963%" height="15" fill="rgb(210,199,37)" fg:x="27200" fg:w="87"/><text x="61.6343%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.12%)</title><rect x="61.4610%" y="517" width="0.1196%" height="15" fill="rgb(244,192,49)" fg:x="27234" fg:w="53"/><text x="61.7110%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (33 samples, 0.07%)</title><rect x="61.5062%" y="501" width="0.0745%" height="15" fill="rgb(226,211,11)" fg:x="27254" fg:w="33"/><text x="61.7562%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.03%)</title><rect x="61.5468%" y="485" width="0.0339%" height="15" fill="rgb(236,162,54)" fg:x="27272" fg:w="15"/><text x="61.7968%" y="495.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::finish_grow (2,303 samples, 5.20%)</title><rect x="56.4013%" y="549" width="5.1974%" height="15" fill="rgb(220,229,9)" fg:x="24992" fg:w="2303"/><text x="56.6513%" y="559.50">argten..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.04%)</title><rect x="61.5987%" y="549" width="0.0429%" height="15" fill="rgb(250,87,22)" fg:x="27295" fg:w="19"/><text x="61.8487%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (15 samples, 0.03%)</title><rect x="61.6416%" y="549" width="0.0339%" height="15" fill="rgb(239,43,17)" fg:x="27314" fg:w="15"/><text x="61.8916%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.03%)</title><rect x="61.6754%" y="549" width="0.0316%" height="15" fill="rgb(231,177,25)" fg:x="27329" fg:w="14"/><text x="61.9254%" y="559.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,402 samples, 5.42%)</title><rect x="56.2885%" y="565" width="5.4208%" height="15" fill="rgb(219,179,1)" fg:x="24942" fg:w="2402"/><text x="56.5385%" y="575.50">argten-..</text></g><g><title>argten-backend-rust`alloc::raw_vec::finish_grow (53 samples, 0.12%)</title><rect x="61.7093%" y="565" width="0.1196%" height="15" fill="rgb(238,219,53)" fg:x="27344" fg:w="53"/><text x="61.9593%" y="575.50"></text></g><g><title>argten-backend-rust`core::hash::BuildHasher::hash_one (285 samples, 0.64%)</title><rect x="61.8289%" y="565" width="0.6432%" height="15" fill="rgb(232,167,36)" fg:x="27397" fg:w="285"/><text x="62.0789%" y="575.50"></text></g><g><title>argten-backend-rust`core::slice::sort::insertion_sort_shift_left (854 samples, 1.93%)</title><rect x="62.4721%" y="565" width="1.9273%" height="15" fill="rgb(244,19,51)" fg:x="27682" fg:w="854"/><text x="62.7221%" y="575.50">a..</text></g><g><title>argten-backend-rust`core::slice::sort::merge_sort (69 samples, 0.16%)</title><rect x="64.3994%" y="565" width="0.1557%" height="15" fill="rgb(224,6,22)" fg:x="28536" fg:w="69"/><text x="64.6494%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (76 samples, 0.17%)</title><rect x="64.5573%" y="565" width="0.1715%" height="15" fill="rgb(224,145,5)" fg:x="28606" fg:w="76"/><text x="64.8073%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (25 samples, 0.06%)</title><rect x="64.7288%" y="565" width="0.0564%" height="15" fill="rgb(234,130,49)" fg:x="28682" fg:w="25"/><text x="64.9788%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 0.02%)</title><rect x="64.7853%" y="565" width="0.0203%" height="15" fill="rgb(254,6,2)" fg:x="28707" fg:w="9"/><text x="65.0353%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.03%)</title><rect x="64.8056%" y="565" width="0.0271%" height="15" fill="rgb(208,96,46)" fg:x="28716" fg:w="12"/><text x="65.0556%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (943 samples, 2.13%)</title><rect x="64.8327%" y="565" width="2.1281%" height="15" fill="rgb(239,3,39)" fg:x="28728" fg:w="943"/><text x="65.0827%" y="575.50">l..</text></g><g><title>libsystem_malloc.dylib`_szone_free (264 samples, 0.60%)</title><rect x="66.9608%" y="565" width="0.5958%" height="15" fill="rgb(233,210,1)" fg:x="29671" fg:w="264"/><text x="67.2108%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`madvise (679 samples, 1.53%)</title><rect x="67.6175%" y="549" width="1.5324%" height="15" fill="rgb(244,137,37)" fg:x="29962" fg:w="679"/><text x="67.8675%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (6 samples, 0.01%)</title><rect x="69.1499%" y="549" width="0.0135%" height="15" fill="rgb(240,136,2)" fg:x="30641" fg:w="6"/><text x="69.3999%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (718 samples, 1.62%)</title><rect x="67.5566%" y="565" width="1.6204%" height="15" fill="rgb(239,18,37)" fg:x="29935" fg:w="718"/><text x="67.8066%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.03%)</title><rect x="69.5426%" y="549" width="0.0293%" height="15" fill="rgb(218,185,22)" fg:x="30815" fg:w="13"/><text x="69.7926%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free_small (189 samples, 0.43%)</title><rect x="69.1770%" y="565" width="0.4265%" height="15" fill="rgb(225,218,4)" fg:x="30653" fg:w="189"/><text x="69.4270%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.03%)</title><rect x="69.5741%" y="549" width="0.0293%" height="15" fill="rgb(230,182,32)" fg:x="30829" fg:w="13"/><text x="69.8241%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (70 samples, 0.16%)</title><rect x="70.5152%" y="549" width="0.1580%" height="15" fill="rgb(242,56,43)" fg:x="31246" fg:w="70"/><text x="70.7652%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="70.6732%" y="549" width="0.0135%" height="15" fill="rgb(233,99,24)" fg:x="31316" fg:w="6"/><text x="70.9232%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (162 samples, 0.37%)</title><rect x="71.6323%" y="533" width="0.3656%" height="15" fill="rgb(234,209,42)" fg:x="31741" fg:w="162"/><text x="71.8823%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,189 samples, 2.68%)</title><rect x="69.6035%" y="565" width="2.6833%" height="15" fill="rgb(227,7,12)" fg:x="30842" fg:w="1189"/><text x="69.8535%" y="575.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (709 samples, 1.60%)</title><rect x="70.6867%" y="549" width="1.6001%" height="15" fill="rgb(245,203,43)" fg:x="31322" fg:w="709"/><text x="70.9367%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (128 samples, 0.29%)</title><rect x="71.9979%" y="533" width="0.2889%" height="15" fill="rgb(238,205,33)" fg:x="31903" fg:w="128"/><text x="72.2479%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.03%)</title><rect x="72.2913%" y="565" width="0.0293%" height="15" fill="rgb(231,56,7)" fg:x="32033" fg:w="13"/><text x="72.5413%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.04%)</title><rect x="72.3252%" y="565" width="0.0361%" height="15" fill="rgb(244,186,29)" fg:x="32048" fg:w="16"/><text x="72.5752%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (209 samples, 0.47%)</title><rect x="72.7517%" y="549" width="0.4717%" height="15" fill="rgb(234,111,31)" fg:x="32237" fg:w="209"/><text x="73.0017%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (6 samples, 0.01%)</title><rect x="73.2234%" y="549" width="0.0135%" height="15" fill="rgb(241,149,10)" fg:x="32446" fg:w="6"/><text x="73.4734%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.02%)</title><rect x="73.4535%" y="517" width="0.0158%" height="15" fill="rgb(249,206,44)" fg:x="32548" fg:w="7"/><text x="73.7035%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="73.4693%" y="517" width="0.0135%" height="15" fill="rgb(251,153,30)" fg:x="32555" fg:w="6"/><text x="73.7193%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (120 samples, 0.27%)</title><rect x="73.2369%" y="549" width="0.2708%" height="15" fill="rgb(239,152,38)" fg:x="32452" fg:w="120"/><text x="73.4869%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (40 samples, 0.09%)</title><rect x="73.4174%" y="533" width="0.0903%" height="15" fill="rgb(249,139,47)" fg:x="32532" fg:w="40"/><text x="73.6674%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.02%)</title><rect x="73.4829%" y="517" width="0.0248%" height="15" fill="rgb(244,64,35)" fg:x="32561" fg:w="11"/><text x="73.7329%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (315 samples, 0.71%)</title><rect x="73.5077%" y="549" width="0.7109%" height="15" fill="rgb(216,46,15)" fg:x="32572" fg:w="315"/><text x="73.7577%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (11 samples, 0.02%)</title><rect x="74.5797%" y="533" width="0.0248%" height="15" fill="rgb(250,74,19)" fg:x="33047" fg:w="11"/><text x="74.8297%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (253 samples, 0.57%)</title><rect x="74.6045%" y="533" width="0.5710%" height="15" fill="rgb(249,42,33)" fg:x="33058" fg:w="253"/><text x="74.8545%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (77 samples, 0.17%)</title><rect x="76.1075%" y="517" width="0.1738%" height="15" fill="rgb(242,149,17)" fg:x="33724" fg:w="77"/><text x="76.3575%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,970 samples, 4.45%)</title><rect x="72.3613%" y="565" width="4.4458%" height="15" fill="rgb(244,29,21)" fg:x="32064" fg:w="1970"/><text x="72.6113%" y="575.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,147 samples, 2.59%)</title><rect x="74.2186%" y="549" width="2.5885%" height="15" fill="rgb(220,130,37)" fg:x="32887" fg:w="1147"/><text x="74.4686%" y="559.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (723 samples, 1.63%)</title><rect x="75.1755%" y="533" width="1.6316%" height="15" fill="rgb(211,67,2)" fg:x="33311" fg:w="723"/><text x="75.4255%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (233 samples, 0.53%)</title><rect x="76.2813%" y="517" width="0.5258%" height="15" fill="rgb(235,68,52)" fg:x="33801" fg:w="233"/><text x="76.5313%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (55 samples, 0.12%)</title><rect x="76.8071%" y="565" width="0.1241%" height="15" fill="rgb(246,142,3)" fg:x="34034" fg:w="55"/><text x="77.0571%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.06%)</title><rect x="76.9312%" y="565" width="0.0564%" height="15" fill="rgb(241,25,7)" fg:x="34089" fg:w="25"/><text x="77.1812%" y="575.50"></text></g><g><title>libsystem_platform.dylib`__bzero (42 samples, 0.09%)</title><rect x="76.9877%" y="565" width="0.0948%" height="15" fill="rgb(242,119,39)" fg:x="34114" fg:w="42"/><text x="77.2377%" y="575.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::fill_shape (29,402 samples, 66.35%)</title><rect x="11.7217%" y="581" width="66.3537%" height="15" fill="rgb(241,98,45)" fg:x="5194" fg:w="29402"/><text x="11.9717%" y="591.50">argten-backend-rust`argten_backend_rust::utils::fill_shape</text></g><g><title>libsystem_platform.dylib`_platform_memset (440 samples, 0.99%)</title><rect x="77.0824%" y="565" width="0.9930%" height="15" fill="rgb(254,28,30)" fg:x="34156" fg:w="440"/><text x="77.3324%" y="575.50"></text></g><g><title>argten-backend-rust`core::slice::sort::insertion_sort_shift_left (114 samples, 0.26%)</title><rect x="78.0754%" y="581" width="0.2573%" height="15" fill="rgb(241,142,54)" fg:x="34596" fg:w="114"/><text x="78.3254%" y="591.50"></text></g><g><title>argten-backend-rust`core::slice::sort::merge_sort (42 samples, 0.09%)</title><rect x="78.3327%" y="581" width="0.0948%" height="15" fill="rgb(222,85,15)" fg:x="34710" fg:w="42"/><text x="78.5827%" y="591.50"></text></g><g><title>argten-backend-rust`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (12 samples, 0.03%)</title><rect x="78.4275%" y="581" width="0.0271%" height="15" fill="rgb(210,85,47)" fg:x="34752" fg:w="12"/><text x="78.6775%" y="591.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.01%)</title><rect x="78.4546%" y="581" width="0.0113%" height="15" fill="rgb(224,206,25)" fg:x="34764" fg:w="5"/><text x="78.7046%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_free (822 samples, 1.86%)</title><rect x="78.4658%" y="581" width="1.8551%" height="15" fill="rgb(243,201,19)" fg:x="34769" fg:w="822"/><text x="78.7158%" y="591.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (315 samples, 0.71%)</title><rect x="80.3209%" y="581" width="0.7109%" height="15" fill="rgb(236,59,4)" fg:x="35591" fg:w="315"/><text x="80.5709%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (244 samples, 0.55%)</title><rect x="81.0318%" y="581" width="0.5507%" height="15" fill="rgb(254,179,45)" fg:x="35906" fg:w="244"/><text x="81.2818%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (69 samples, 0.16%)</title><rect x="81.5825%" y="581" width="0.1557%" height="15" fill="rgb(226,14,10)" fg:x="36150" fg:w="69"/><text x="81.8325%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free_small (18 samples, 0.04%)</title><rect x="81.7404%" y="581" width="0.0406%" height="15" fill="rgb(244,27,41)" fg:x="36220" fg:w="18"/><text x="81.9904%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.04%)</title><rect x="81.7810%" y="581" width="0.0361%" height="15" fill="rgb(235,35,32)" fg:x="36238" fg:w="16"/><text x="82.0310%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (305 samples, 0.69%)</title><rect x="81.8172%" y="581" width="0.6883%" height="15" fill="rgb(218,68,31)" fg:x="36254" fg:w="305"/><text x="82.0672%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.05%)</title><rect x="82.5055%" y="581" width="0.0496%" height="15" fill="rgb(207,120,37)" fg:x="36559" fg:w="22"/><text x="82.7555%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::engine::Engine::calculate_fitness_internal (37,003 samples, 83.51%)</title><rect x="2.9902%" y="597" width="83.5075%" height="15" fill="rgb(227,98,0)" fg:x="1325" fg:w="37003"/><text x="3.2402%" y="607.50">argten-backend-rust`argten_backend_rust::engine::Engine::calculate_fitness_internal</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,747 samples, 3.94%)</title><rect x="82.5551%" y="581" width="3.9426%" height="15" fill="rgb(207,7,3)" fg:x="36581" fg:w="1747"/><text x="82.8051%" y="591.50">libs..</text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (36 samples, 0.08%)</title><rect x="86.5000%" y="581" width="0.0812%" height="15" fill="rgb(206,98,19)" fg:x="38329" fg:w="36"/><text x="86.7500%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::point::Point::mutate (5 samples, 0.01%)</title><rect x="86.5812%" y="581" width="0.0113%" height="15" fill="rgb(217,5,26)" fg:x="38365" fg:w="5"/><text x="86.8312%" y="591.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (148 samples, 0.33%)</title><rect x="86.6309%" y="549" width="0.3340%" height="15" fill="rgb(235,190,38)" fg:x="38387" fg:w="148"/><text x="86.8809%" y="559.50"></text></g><g><title>argten-backend-rust`rand::rngs::thread::thread_rng (9 samples, 0.02%)</title><rect x="87.0235%" y="533" width="0.0203%" height="15" fill="rgb(247,86,24)" fg:x="38561" fg:w="9"/><text x="87.2735%" y="543.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::color::Color::mutate (228 samples, 0.51%)</title><rect x="86.6083%" y="565" width="0.5145%" height="15" fill="rgb(205,101,16)" fg:x="38377" fg:w="228"/><text x="86.8583%" y="575.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (70 samples, 0.16%)</title><rect x="86.9649%" y="549" width="0.1580%" height="15" fill="rgb(246,168,33)" fg:x="38535" fg:w="70"/><text x="87.2149%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.08%)</title><rect x="87.0438%" y="533" width="0.0790%" height="15" fill="rgb(231,114,1)" fg:x="38570" fg:w="35"/><text x="87.2938%" y="543.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (111 samples, 0.25%)</title><rect x="87.1296%" y="549" width="0.2505%" height="15" fill="rgb(207,184,53)" fg:x="38608" fg:w="111"/><text x="87.3796%" y="559.50"></text></g><g><title>argten-backend-rust`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (7 samples, 0.02%)</title><rect x="87.3959%" y="533" width="0.0158%" height="15" fill="rgb(224,95,51)" fg:x="38726" fg:w="7"/><text x="87.6459%" y="543.50"></text></g><g><title>argten-backend-rust`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (7 samples, 0.02%)</title><rect x="87.3959%" y="517" width="0.0158%" height="15" fill="rgb(212,188,45)" fg:x="38726" fg:w="7"/><text x="87.6459%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (6 samples, 0.01%)</title><rect x="87.3982%" y="501" width="0.0135%" height="15" fill="rgb(223,154,38)" fg:x="38727" fg:w="6"/><text x="87.6482%" y="511.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (42 samples, 0.09%)</title><rect x="87.3801%" y="549" width="0.0948%" height="15" fill="rgb(251,22,52)" fg:x="38719" fg:w="42"/><text x="87.6301%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.05%)</title><rect x="87.4207%" y="533" width="0.0542%" height="15" fill="rgb(229,209,22)" fg:x="38737" fg:w="24"/><text x="87.6707%" y="543.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::point::Point::mutate (157 samples, 0.35%)</title><rect x="87.1228%" y="565" width="0.3543%" height="15" fill="rgb(234,138,34)" fg:x="38605" fg:w="157"/><text x="87.3728%" y="575.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (13 samples, 0.03%)</title><rect x="87.4772%" y="565" width="0.0293%" height="15" fill="rgb(212,95,11)" fg:x="38762" fg:w="13"/><text x="87.7272%" y="575.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::drawing::Drawing::mutate (457 samples, 1.03%)</title><rect x="86.4977%" y="597" width="1.0313%" height="15" fill="rgb(240,179,47)" fg:x="38328" fg:w="457"/><text x="86.7477%" y="607.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::polygon::Polygon::mutate (415 samples, 0.94%)</title><rect x="86.5925%" y="581" width="0.9366%" height="15" fill="rgb(240,163,11)" fg:x="38370" fg:w="415"/><text x="86.8425%" y="591.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.01%)</title><rect x="87.5155%" y="565" width="0.0135%" height="15" fill="rgb(236,37,12)" fg:x="38779" fg:w="6"/><text x="87.7655%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="93.8232%" y="517" width="0.0226%" height="15" fill="rgb(232,164,16)" fg:x="41574" fg:w="10"/><text x="94.0732%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.02%)</title><rect x="93.8525%" y="501" width="0.0181%" height="15" fill="rgb(244,205,15)" fg:x="41587" fg:w="8"/><text x="94.1025%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.07%)</title><rect x="93.8164%" y="533" width="0.0745%" height="15" fill="rgb(223,117,47)" fg:x="41571" fg:w="33"/><text x="94.0664%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.05%)</title><rect x="93.8458%" y="517" width="0.0451%" height="15" fill="rgb(244,107,35)" fg:x="41584" fg:w="20"/><text x="94.0958%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.02%)</title><rect x="93.8706%" y="501" width="0.0203%" height="15" fill="rgb(205,140,8)" fg:x="41595" fg:w="9"/><text x="94.1206%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="93.8774%" y="485" width="0.0135%" height="15" fill="rgb(228,84,46)" fg:x="41598" fg:w="6"/><text x="94.1274%" y="495.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::finish_grow (35 samples, 0.08%)</title><rect x="93.8142%" y="549" width="0.0790%" height="15" fill="rgb(254,188,9)" fg:x="41570" fg:w="35"/><text x="94.0642%" y="559.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (38 samples, 0.09%)</title><rect x="93.8142%" y="565" width="0.0858%" height="15" fill="rgb(206,112,54)" fg:x="41570" fg:w="38"/><text x="94.0642%" y="575.50"></text></g><g><title>argten-backend-rust`core::slice::sort::insertion_sort_shift_left (5 samples, 0.01%)</title><rect x="93.9067%" y="565" width="0.0113%" height="15" fill="rgb(216,84,49)" fg:x="41611" fg:w="5"/><text x="94.1567%" y="575.50"></text></g><g><title>argten-backend-rust`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 0.15%)</title><rect x="93.7758%" y="581" width="0.1512%" height="15" fill="rgb(214,194,35)" fg:x="41553" fg:w="67"/><text x="94.0258%" y="591.50"></text></g><g><title>argten-backend-rust`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.07%)</title><rect x="93.9270%" y="581" width="0.0654%" height="15" fill="rgb(249,28,3)" fg:x="41620" fg:w="29"/><text x="94.1770%" y="591.50"></text></g><g><title>argten-backend-rust`DYLD-STUB$$malloc (16 samples, 0.04%)</title><rect x="94.0534%" y="565" width="0.0361%" height="15" fill="rgb(222,56,52)" fg:x="41676" fg:w="16"/><text x="94.3034%" y="575.50"></text></g><g><title>argten-backend-rust`__rdl_alloc (9 samples, 0.02%)</title><rect x="94.0895%" y="565" width="0.0203%" height="15" fill="rgb(245,217,50)" fg:x="41692" fg:w="9"/><text x="94.3395%" y="575.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::finish_grow (23 samples, 0.05%)</title><rect x="94.1098%" y="565" width="0.0519%" height="15" fill="rgb(213,201,24)" fg:x="41701" fg:w="23"/><text x="94.3598%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.12%)</title><rect x="94.1617%" y="565" width="0.1174%" height="15" fill="rgb(248,116,28)" fg:x="41724" fg:w="52"/><text x="94.4117%" y="575.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (213 samples, 0.48%)</title><rect x="93.9947%" y="581" width="0.4807%" height="15" fill="rgb(219,72,43)" fg:x="41650" fg:w="213"/><text x="94.2447%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (87 samples, 0.20%)</title><rect x="94.2791%" y="565" width="0.1963%" height="15" fill="rgb(209,138,14)" fg:x="41776" fg:w="87"/><text x="94.5291%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="94.5521%" y="501" width="0.0135%" height="15" fill="rgb(222,18,33)" fg:x="41897" fg:w="6"/><text x="94.8021%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.01%)</title><rect x="94.5544%" y="485" width="0.0113%" height="15" fill="rgb(213,199,7)" fg:x="41898" fg:w="5"/><text x="94.8044%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.03%)</title><rect x="94.5386%" y="517" width="0.0293%" height="15" fill="rgb(250,110,10)" fg:x="41891" fg:w="13"/><text x="94.7886%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free_small (16 samples, 0.04%)</title><rect x="94.5905%" y="501" width="0.0361%" height="15" fill="rgb(248,123,6)" fg:x="41914" fg:w="16"/><text x="94.8405%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.02%)</title><rect x="94.6266%" y="501" width="0.0203%" height="15" fill="rgb(206,91,31)" fg:x="41930" fg:w="9"/><text x="94.8766%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.01%)</title><rect x="94.6334%" y="485" width="0.0135%" height="15" fill="rgb(211,154,13)" fg:x="41933" fg:w="6"/><text x="94.8834%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (13 samples, 0.03%)</title><rect x="94.6605%" y="501" width="0.0293%" height="15" fill="rgb(225,148,7)" fg:x="41945" fg:w="13"/><text x="94.9105%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (15 samples, 0.03%)</title><rect x="94.7056%" y="485" width="0.0339%" height="15" fill="rgb(220,160,43)" fg:x="41965" fg:w="15"/><text x="94.9556%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.02%)</title><rect x="94.7169%" y="469" width="0.0226%" height="15" fill="rgb(213,52,39)" fg:x="41970" fg:w="10"/><text x="94.9669%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.05%)</title><rect x="94.6898%" y="501" width="0.0519%" height="15" fill="rgb(243,137,7)" fg:x="41958" fg:w="23"/><text x="94.9398%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (80 samples, 0.18%)</title><rect x="94.5725%" y="517" width="0.1805%" height="15" fill="rgb(230,79,13)" fg:x="41906" fg:w="80"/><text x="94.8225%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.01%)</title><rect x="94.7417%" y="501" width="0.0113%" height="15" fill="rgb(247,105,23)" fg:x="41981" fg:w="5"/><text x="94.9917%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (317 samples, 0.72%)</title><rect x="94.5115%" y="533" width="0.7154%" height="15" fill="rgb(223,179,41)" fg:x="41879" fg:w="317"/><text x="94.7615%" y="543.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (208 samples, 0.47%)</title><rect x="94.7575%" y="517" width="0.4694%" height="15" fill="rgb(218,9,34)" fg:x="41988" fg:w="208"/><text x="95.0075%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (339 samples, 0.77%)</title><rect x="94.4957%" y="549" width="0.7650%" height="15" fill="rgb(222,106,8)" fg:x="41872" fg:w="339"/><text x="94.7457%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="95.2382%" y="533" width="0.0226%" height="15" fill="rgb(211,220,0)" fg:x="42201" fg:w="10"/><text x="95.4882%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="95.2472%" y="517" width="0.0135%" height="15" fill="rgb(229,52,16)" fg:x="42205" fg:w="6"/><text x="95.4972%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.02%)</title><rect x="95.2675%" y="533" width="0.0181%" height="15" fill="rgb(212,155,18)" fg:x="42214" fg:w="8"/><text x="95.5175%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.04%)</title><rect x="95.2653%" y="549" width="0.0384%" height="15" fill="rgb(242,21,14)" fg:x="42213" fg:w="17"/><text x="95.5153%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.02%)</title><rect x="95.2856%" y="533" width="0.0181%" height="15" fill="rgb(222,19,48)" fg:x="42222" fg:w="8"/><text x="95.5356%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.01%)</title><rect x="95.2924%" y="517" width="0.0113%" height="15" fill="rgb(232,45,27)" fg:x="42225" fg:w="5"/><text x="95.5424%" y="527.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::finish_grow (359 samples, 0.81%)</title><rect x="94.4957%" y="565" width="0.8102%" height="15" fill="rgb(249,103,42)" fg:x="41872" fg:w="359"/><text x="94.7457%" y="575.50"></text></g><g><title>argten-backend-rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (372 samples, 0.84%)</title><rect x="94.4754%" y="581" width="0.8395%" height="15" fill="rgb(246,81,33)" fg:x="41863" fg:w="372"/><text x="94.7254%" y="591.50"></text></g><g><title>argten-backend-rust`core::hash::BuildHasher::hash_one (41 samples, 0.09%)</title><rect x="95.3217%" y="581" width="0.0925%" height="15" fill="rgb(252,33,42)" fg:x="42238" fg:w="41"/><text x="95.5717%" y="591.50"></text></g><g><title>argten-backend-rust`core::slice::sort::insertion_sort_shift_left (142 samples, 0.32%)</title><rect x="95.4142%" y="581" width="0.3205%" height="15" fill="rgb(209,212,41)" fg:x="42279" fg:w="142"/><text x="95.6642%" y="591.50"></text></g><g><title>argten-backend-rust`core::slice::sort::merge_sort (12 samples, 0.03%)</title><rect x="95.7347%" y="581" width="0.0271%" height="15" fill="rgb(207,154,6)" fg:x="42421" fg:w="12"/><text x="95.9847%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (9 samples, 0.02%)</title><rect x="95.7640%" y="581" width="0.0203%" height="15" fill="rgb(223,64,47)" fg:x="42434" fg:w="9"/><text x="96.0140%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (151 samples, 0.34%)</title><rect x="95.8001%" y="581" width="0.3408%" height="15" fill="rgb(211,161,38)" fg:x="42450" fg:w="151"/><text x="96.0501%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (41 samples, 0.09%)</title><rect x="96.1409%" y="581" width="0.0925%" height="15" fill="rgb(219,138,40)" fg:x="42601" fg:w="41"/><text x="96.3909%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (123 samples, 0.28%)</title><rect x="96.2334%" y="581" width="0.2776%" height="15" fill="rgb(241,228,46)" fg:x="42642" fg:w="123"/><text x="96.4834%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`madvise (118 samples, 0.27%)</title><rect x="96.2447%" y="565" width="0.2663%" height="15" fill="rgb(223,209,38)" fg:x="42647" fg:w="118"/><text x="96.4947%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free_small (33 samples, 0.07%)</title><rect x="96.5110%" y="581" width="0.0745%" height="15" fill="rgb(236,164,45)" fg:x="42765" fg:w="33"/><text x="96.7610%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (14 samples, 0.03%)</title><rect x="96.7570%" y="565" width="0.0316%" height="15" fill="rgb(231,15,5)" fg:x="42874" fg:w="14"/><text x="97.0070%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.05%)</title><rect x="97.0098%" y="549" width="0.0496%" height="15" fill="rgb(252,35,15)" fg:x="42986" fg:w="22"/><text x="97.2598%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (236 samples, 0.53%)</title><rect x="96.5855%" y="581" width="0.5326%" height="15" fill="rgb(248,181,18)" fg:x="42798" fg:w="236"/><text x="96.8355%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (146 samples, 0.33%)</title><rect x="96.7886%" y="565" width="0.3295%" height="15" fill="rgb(233,39,42)" fg:x="42888" fg:w="146"/><text x="97.0386%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (26 samples, 0.06%)</title><rect x="97.0594%" y="549" width="0.0587%" height="15" fill="rgb(238,110,33)" fg:x="43008" fg:w="26"/><text x="97.3094%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (27 samples, 0.06%)</title><rect x="97.1835%" y="565" width="0.0609%" height="15" fill="rgb(233,195,10)" fg:x="43063" fg:w="27"/><text x="97.4335%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (19 samples, 0.04%)</title><rect x="97.2445%" y="565" width="0.0429%" height="15" fill="rgb(254,105,3)" fg:x="43090" fg:w="19"/><text x="97.4945%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (56 samples, 0.13%)</title><rect x="97.2874%" y="565" width="0.1264%" height="15" fill="rgb(221,225,9)" fg:x="43109" fg:w="56"/><text x="97.5374%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (32 samples, 0.07%)</title><rect x="97.4679%" y="549" width="0.0722%" height="15" fill="rgb(224,227,45)" fg:x="43189" fg:w="32"/><text x="97.7179%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (15 samples, 0.03%)</title><rect x="97.7094%" y="533" width="0.0339%" height="15" fill="rgb(229,198,43)" fg:x="43296" fg:w="15"/><text x="97.9594%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (313 samples, 0.71%)</title><rect x="97.1271%" y="581" width="0.7064%" height="15" fill="rgb(206,209,35)" fg:x="43038" fg:w="313"/><text x="97.3771%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (186 samples, 0.42%)</title><rect x="97.4137%" y="565" width="0.4198%" height="15" fill="rgb(245,195,53)" fg:x="43165" fg:w="186"/><text x="97.6637%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (130 samples, 0.29%)</title><rect x="97.5401%" y="549" width="0.2934%" height="15" fill="rgb(240,92,26)" fg:x="43221" fg:w="130"/><text x="97.7901%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.09%)</title><rect x="97.7432%" y="533" width="0.0903%" height="15" fill="rgb(207,40,23)" fg:x="43311" fg:w="40"/><text x="97.9932%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="97.8335%" y="581" width="0.0226%" height="15" fill="rgb(223,111,35)" fg:x="43351" fg:w="10"/><text x="98.0835%" y="591.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.01%)</title><rect x="97.8651%" y="581" width="0.0135%" height="15" fill="rgb(229,147,28)" fg:x="43365" fg:w="6"/><text x="98.1151%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::fill_shape (4,672 samples, 10.54%)</title><rect x="87.5336%" y="597" width="10.5437%" height="15" fill="rgb(211,29,28)" fg:x="38787" fg:w="4672"/><text x="87.7836%" y="607.50">argten-backend-..</text></g><g><title>libsystem_platform.dylib`_platform_memset (88 samples, 0.20%)</title><rect x="97.8786%" y="581" width="0.1986%" height="15" fill="rgb(228,72,33)" fg:x="43371" fg:w="88"/><text x="98.1286%" y="591.50"></text></g><g><title>argten-backend-rust`core::slice::sort::insertion_sort_shift_left (12 samples, 0.03%)</title><rect x="98.0772%" y="597" width="0.0271%" height="15" fill="rgb(205,214,31)" fg:x="43459" fg:w="12"/><text x="98.3272%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (5 samples, 0.01%)</title><rect x="98.1269%" y="565" width="0.0113%" height="15" fill="rgb(224,111,15)" fg:x="43481" fg:w="5"/><text x="98.3769%" y="575.50"></text></g><g><title>argten-backend-rust`show_image::oneshot::Receiver&lt;T&gt;::recv (7 samples, 0.02%)</title><rect x="98.1269%" y="581" width="0.0158%" height="15" fill="rgb(253,21,26)" fg:x="43481" fg:w="7"/><text x="98.3769%" y="591.50"></text></g><g><title>argten-backend-rust`show_image::backend::proxy::WindowProxy::set_image (74 samples, 0.17%)</title><rect x="98.1178%" y="597" width="0.1670%" height="15" fill="rgb(245,139,43)" fg:x="43477" fg:w="74"/><text x="98.3678%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (61 samples, 0.14%)</title><rect x="98.1472%" y="581" width="0.1377%" height="15" fill="rgb(252,170,7)" fg:x="43490" fg:w="61"/><text x="98.3972%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_free (150 samples, 0.34%)</title><rect x="98.2961%" y="597" width="0.3385%" height="15" fill="rgb(231,118,14)" fg:x="43556" fg:w="150"/><text x="98.5461%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (63 samples, 0.14%)</title><rect x="98.6347%" y="597" width="0.1422%" height="15" fill="rgb(238,83,0)" fg:x="43706" fg:w="63"/><text x="98.8847%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (42 samples, 0.09%)</title><rect x="98.7768%" y="597" width="0.0948%" height="15" fill="rgb(221,39,39)" fg:x="43769" fg:w="42"/><text x="99.0268%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.02%)</title><rect x="98.8716%" y="597" width="0.0203%" height="15" fill="rgb(222,119,46)" fg:x="43811" fg:w="9"/><text x="99.1216%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (64 samples, 0.14%)</title><rect x="98.9055%" y="597" width="0.1444%" height="15" fill="rgb(222,165,49)" fg:x="43826" fg:w="64"/><text x="99.1555%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (308 samples, 0.70%)</title><rect x="99.0567%" y="597" width="0.6951%" height="15" fill="rgb(219,113,52)" fg:x="43893" fg:w="308"/><text x="99.3067%" y="607.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::engine::Engine::tick (43,025 samples, 97.10%)</title><rect x="2.8345%" y="613" width="97.0978%" height="15" fill="rgb(214,7,15)" fg:x="1256" fg:w="43025"/><text x="3.0845%" y="623.50">argten-backend-rust`argten_backend_rust::engine::Engine::tick</text></g><g><title>libsystem_platform.dylib`_platform_memset (80 samples, 0.18%)</title><rect x="99.7518%" y="597" width="0.1805%" height="15" fill="rgb(235,32,4)" fg:x="44201" fg:w="80"/><text x="100.0018%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.01%)</title><rect x="99.9323%" y="613" width="0.0113%" height="15" fill="rgb(238,90,54)" fg:x="44281" fg:w="5"/><text x="100.1823%" y="623.50"></text></g><g><title>all (44,311 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(213,208,19)" fg:x="0" fg:w="44311"/><text x="0.2500%" y="735.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (43,098 samples, 97.26%)</title><rect x="2.7375%" y="709" width="97.2625%" height="15" fill="rgb(233,156,4)" fg:x="1213" fg:w="43098"/><text x="2.9875%" y="719.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (43,098 samples, 97.26%)</title><rect x="2.7375%" y="693" width="97.2625%" height="15" fill="rgb(207,194,5)" fg:x="1213" fg:w="43098"/><text x="2.9875%" y="703.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>argten-backend-rust`std::sys::pal::unix::thread::Thread::new::thread_start (43,097 samples, 97.26%)</title><rect x="2.7397%" y="677" width="97.2603%" height="15" fill="rgb(206,111,30)" fg:x="1214" fg:w="43097"/><text x="2.9897%" y="687.50">argten-backend-rust`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}} (43,097 samples, 97.26%)</title><rect x="2.7397%" y="661" width="97.2603%" height="15" fill="rgb(243,70,54)" fg:x="1214" fg:w="43097"/><text x="2.9897%" y="671.50">argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace (43,097 samples, 97.26%)</title><rect x="2.7397%" y="645" width="97.2603%" height="15" fill="rgb(242,28,8)" fg:x="1214" fg:w="43097"/><text x="2.9897%" y="655.50">argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>argten-backend-rust`argten_backend_rust::main::main (43,097 samples, 97.26%)</title><rect x="2.7397%" y="629" width="97.2603%" height="15" fill="rgb(219,106,18)" fg:x="1214" fg:w="43097"/><text x="2.9897%" y="639.50">argten-backend-rust`argten_backend_rust::main::main</text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.06%)</title><rect x="99.9436%" y="613" width="0.0564%" height="15" fill="rgb(244,222,10)" fg:x="44286" fg:w="25"/><text x="100.1936%" y="623.50"></text></g></svg></svg>