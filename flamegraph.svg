<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="45309"><g><title>AppKit`-[NSApplication _handleEvent:] (5 samples, 0.01%)</title><rect x="0.0022%" y="549" width="0.0110%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="5"/><text x="0.2522%" y="559.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app::WinitApplication::send_event (5 samples, 0.01%)</title><rect x="0.0022%" y="533" width="0.0110%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="5"/><text x="0.2522%" y="543.50"></text></g><g><title>AppKit`-[NSApplication(NSEventRouting) sendEvent:] (5 samples, 0.01%)</title><rect x="0.0022%" y="517" width="0.0110%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="5"/><text x="0.2522%" y="527.50"></text></g><g><title>HIToolbox`AEProcessAppleEvent (5 samples, 0.01%)</title><rect x="0.0154%" y="517" width="0.0110%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="5"/><text x="0.2654%" y="527.50"></text></g><g><title>AE`aeProcessAppleEvent (5 samples, 0.01%)</title><rect x="0.0154%" y="501" width="0.0110%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="5"/><text x="0.2654%" y="511.50"></text></g><g><title>AE`0x000000018d36b2c0 (5 samples, 0.01%)</title><rect x="0.0154%" y="485" width="0.0110%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="5"/><text x="0.2654%" y="495.50"></text></g><g><title>AE`0x000000018d36b36c (5 samples, 0.01%)</title><rect x="0.0154%" y="469" width="0.0110%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="5"/><text x="0.2654%" y="479.50"></text></g><g><title>Foundation`_NSAppleEventManagerGenericHandler (5 samples, 0.01%)</title><rect x="0.0154%" y="453" width="0.0110%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="5"/><text x="0.2654%" y="463.50"></text></g><g><title>Foundation`-[NSAppleEventManager dispatchRawAppleEvent:withRawReply:handlerRefCon:] (5 samples, 0.01%)</title><rect x="0.0154%" y="437" width="0.0110%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="5"/><text x="0.2654%" y="447.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleCoreEvent:withReplyEvent:] (5 samples, 0.01%)</title><rect x="0.0154%" y="421" width="0.0110%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="5"/><text x="0.2654%" y="431.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleAEOpenEvent:] (5 samples, 0.01%)</title><rect x="0.0154%" y="405" width="0.0110%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="5"/><text x="0.2654%" y="415.50"></text></g><g><title>AppKit`-[NSApplication _sendFinishLaunchingNotification] (5 samples, 0.01%)</title><rect x="0.0154%" y="389" width="0.0110%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="5"/><text x="0.2654%" y="399.50"></text></g><g><title>AppKit`-[NSTextInputContext activate] (6 samples, 0.01%)</title><rect x="0.0530%" y="341" width="0.0132%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="6"/><text x="0.3030%" y="351.50"></text></g><g><title>AppKit`+[NSTextInputContext currentInputContext_withFirstResponderSync:] (7 samples, 0.02%)</title><rect x="0.0530%" y="357" width="0.0154%" height="15" fill="rgb(206,188,39)" fg:x="24" fg:w="7"/><text x="0.3030%" y="367.50"></text></g><g><title>AppKit`__38-[NSApplication setWindowsNeedUpdate:]_block_invoke_2 (9 samples, 0.02%)</title><rect x="0.0530%" y="389" width="0.0199%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="9"/><text x="0.3030%" y="399.50"></text></g><g><title>AppKit`-[NSApplication updateWindows] (9 samples, 0.02%)</title><rect x="0.0530%" y="373" width="0.0199%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="9"/><text x="0.3030%" y="383.50"></text></g><g><title>QuartzCore`CA::Layer::display_if_needed (7 samples, 0.02%)</title><rect x="0.0728%" y="341" width="0.0154%" height="15" fill="rgb(225,20,46)" fg:x="33" fg:w="7"/><text x="0.3228%" y="351.50"></text></g><g><title>AppKit`-[NSViewBackingLayer display] (5 samples, 0.01%)</title><rect x="0.0772%" y="325" width="0.0110%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="5"/><text x="0.3272%" y="335.50"></text></g><g><title>QuartzCore`CA::Context::commit_transaction (9 samples, 0.02%)</title><rect x="0.0728%" y="357" width="0.0199%" height="15" fill="rgb(221,200,47)" fg:x="33" fg:w="9"/><text x="0.3228%" y="367.50"></text></g><g><title>AppKit`___NSRunLoopObserverCreateWithHandler_block_invoke (21 samples, 0.05%)</title><rect x="0.0530%" y="405" width="0.0463%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="21"/><text x="0.3030%" y="415.50"></text></g><g><title>AppKit`__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke (12 samples, 0.03%)</title><rect x="0.0728%" y="389" width="0.0265%" height="15" fill="rgb(249,33,26)" fg:x="33" fg:w="12"/><text x="0.3228%" y="399.50"></text></g><g><title>QuartzCore`CA::Transaction::commit (12 samples, 0.03%)</title><rect x="0.0728%" y="373" width="0.0265%" height="15" fill="rgb(235,183,28)" fg:x="33" fg:w="12"/><text x="0.3228%" y="383.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateTitleProperties:animated:] (5 samples, 0.01%)</title><rect x="0.1258%" y="165" width="0.0110%" height="15" fill="rgb(221,5,38)" fg:x="57" fg:w="5"/><text x="0.3758%" y="175.50"></text></g><g><title>AppKit`-[NSThemeFrame setRepresentedURL:] (5 samples, 0.01%)</title><rect x="0.1258%" y="149" width="0.0110%" height="15" fill="rgb(247,18,42)" fg:x="57" fg:w="5"/><text x="0.3758%" y="159.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateButtons] (5 samples, 0.01%)</title><rect x="0.1258%" y="133" width="0.0110%" height="15" fill="rgb(241,131,45)" fg:x="57" fg:w="5"/><text x="0.3758%" y="143.50"></text></g><g><title>AppKit`-[NSWindow showsFullScreenButton] (5 samples, 0.01%)</title><rect x="0.1258%" y="117" width="0.0110%" height="15" fill="rgb(249,31,29)" fg:x="57" fg:w="5"/><text x="0.3758%" y="127.50"></text></g><g><title>AppKit`-[NSWindow(NSFullScreen) canEnterFullScreenMode] (5 samples, 0.01%)</title><rect x="0.1258%" y="101" width="0.0110%" height="15" fill="rgb(225,111,53)" fg:x="57" fg:w="5"/><text x="0.3758%" y="111.50"></text></g><g><title>AppKit`-[NSWindow _effectiveCollectionBehavior] (5 samples, 0.01%)</title><rect x="0.1258%" y="85" width="0.0110%" height="15" fill="rgb(238,160,17)" fg:x="57" fg:w="5"/><text x="0.3758%" y="95.50"></text></g><g><title>AppKit`-[NSWindow _cacheAndSetPropertiesForCollectionBehavior:] (5 samples, 0.01%)</title><rect x="0.1258%" y="69" width="0.0110%" height="15" fill="rgb(214,148,48)" fg:x="57" fg:w="5"/><text x="0.3758%" y="79.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateButtons] (5 samples, 0.01%)</title><rect x="0.1258%" y="53" width="0.0110%" height="15" fill="rgb(232,36,49)" fg:x="57" fg:w="5"/><text x="0.3758%" y="63.50"></text></g><g><title>AppKit`-[NSFrameView initWithFrame:styleMask:owner:] (7 samples, 0.02%)</title><rect x="0.1258%" y="181" width="0.0154%" height="15" fill="rgb(209,103,24)" fg:x="57" fg:w="7"/><text x="0.3758%" y="191.50"></text></g><g><title>AppKit`-[NSThemeFrame initWithFrame:styleMask:owner:] (10 samples, 0.02%)</title><rect x="0.1258%" y="197" width="0.0221%" height="15" fill="rgb(229,88,8)" fg:x="57" fg:w="10"/><text x="0.3758%" y="207.50"></text></g><g><title>AppKit`-[NSWindow _commonInitFrame:styleMask:backing:defer:] (11 samples, 0.02%)</title><rect x="0.1258%" y="213" width="0.0243%" height="15" fill="rgb(213,181,19)" fg:x="57" fg:w="11"/><text x="0.3758%" y="223.50"></text></g><g><title>AppKit`-[NSWindow initWithContentRect:styleMask:backing:defer:] (14 samples, 0.03%)</title><rect x="0.1214%" y="245" width="0.0309%" height="15" fill="rgb(254,191,54)" fg:x="55" fg:w="14"/><text x="0.3714%" y="255.50"></text></g><g><title>AppKit`-[NSWindow _initContent:styleMask:backing:defer:contentView:] (14 samples, 0.03%)</title><rect x="0.1214%" y="229" width="0.0309%" height="15" fill="rgb(241,83,37)" fg:x="55" fg:w="14"/><text x="0.3714%" y="239.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::ContextHandle::create_window (19 samples, 0.04%)</title><rect x="0.1126%" y="293" width="0.0419%" height="15" fill="rgb(233,36,39)" fg:x="51" fg:w="19"/><text x="0.3626%" y="303.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::Window::new (15 samples, 0.03%)</title><rect x="0.1214%" y="277" width="0.0331%" height="15" fill="rgb(226,3,54)" fg:x="55" fg:w="15"/><text x="0.3714%" y="287.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::window::WinitWindow::new (15 samples, 0.03%)</title><rect x="0.1214%" y="261" width="0.0331%" height="15" fill="rgb(245,192,40)" fg:x="55" fg:w="15"/><text x="0.3714%" y="271.50"></text></g><g><title>AGXMetalG13X`AGX::BlitDispatchContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::beginComputePass (7 samples, 0.02%)</title><rect x="0.1611%" y="149" width="0.0154%" height="15" fill="rgb(238,167,29)" fg:x="73" fg:w="7"/><text x="0.4111%" y="159.50"></text></g><g><title>AGXMetalG13X`AGX::ContextCommon&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::newCommand (6 samples, 0.01%)</title><rect x="0.1633%" y="133" width="0.0132%" height="15" fill="rgb(232,182,51)" fg:x="74" fg:w="6"/><text x="0.4133%" y="143.50"></text></g><g><title>AGXMetalG13X`AGX::BlitDispatchContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::blitCDMBuffer (11 samples, 0.02%)</title><rect x="0.1611%" y="165" width="0.0243%" height="15" fill="rgb(231,60,39)" fg:x="73" fg:w="11"/><text x="0.4111%" y="175.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyBlitContext copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:] (12 samples, 0.03%)</title><rect x="0.1611%" y="181" width="0.0265%" height="15" fill="rgb(208,69,12)" fg:x="73" fg:w="12"/><text x="0.4111%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_encoding (5 samples, 0.01%)</title><rect x="0.1876%" y="181" width="0.0110%" height="15" fill="rgb(235,93,37)" fg:x="85" fg:w="5"/><text x="0.4376%" y="191.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::buffer_unmap (20 samples, 0.04%)</title><rect x="0.1589%" y="245" width="0.0441%" height="15" fill="rgb(213,116,39)" fg:x="72" fg:w="20"/><text x="0.4089%" y="255.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::buffer_unmap (20 samples, 0.04%)</title><rect x="0.1589%" y="229" width="0.0441%" height="15" fill="rgb(222,207,29)" fg:x="72" fg:w="20"/><text x="0.4089%" y="239.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::buffer_unmap (20 samples, 0.04%)</title><rect x="0.1589%" y="213" width="0.0441%" height="15" fill="rgb(206,96,30)" fg:x="72" fg:w="20"/><text x="0.4089%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::buffer_unmap_inner (20 samples, 0.04%)</title><rect x="0.1589%" y="197" width="0.0441%" height="15" fill="rgb(218,138,4)" fg:x="72" fg:w="20"/><text x="0.4089%" y="207.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (61 samples, 0.13%)</title><rect x="0.2119%" y="101" width="0.1346%" height="15" fill="rgb(250,191,14)" fg:x="96" fg:w="61"/><text x="0.4619%" y="111.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (61 samples, 0.13%)</title><rect x="0.2119%" y="85" width="0.1346%" height="15" fill="rgb(239,60,40)" fg:x="96" fg:w="61"/><text x="0.4619%" y="95.50"></text></g><g><title>IOKit`IOConnectCallMethod (61 samples, 0.13%)</title><rect x="0.2119%" y="69" width="0.1346%" height="15" fill="rgb(206,27,48)" fg:x="96" fg:w="61"/><text x="0.4619%" y="79.50"></text></g><g><title>IOKit`io_connect_method (61 samples, 0.13%)</title><rect x="0.2119%" y="53" width="0.1346%" height="15" fill="rgb(225,35,8)" fg:x="96" fg:w="61"/><text x="0.4619%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (61 samples, 0.13%)</title><rect x="0.2119%" y="37" width="0.1346%" height="15" fill="rgb(250,213,24)" fg:x="96" fg:w="61"/><text x="0.4619%" y="47.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithDevice:pointer:length:alignment:options:sysMemSize:gpuAddress:args:argsSize:deallocator:] (62 samples, 0.14%)</title><rect x="0.2119%" y="117" width="0.1368%" height="15" fill="rgb(247,123,22)" fg:x="96" fg:w="62"/><text x="0.4619%" y="127.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (25 samples, 0.06%)</title><rect x="0.3509%" y="85" width="0.0552%" height="15" fill="rgb(231,138,38)" fg:x="159" fg:w="25"/><text x="0.6009%" y="95.50"></text></g><g><title>IOKit`IOConnectCallMethod (25 samples, 0.06%)</title><rect x="0.3509%" y="69" width="0.0552%" height="15" fill="rgb(231,145,46)" fg:x="159" fg:w="25"/><text x="0.6009%" y="79.50"></text></g><g><title>IOKit`io_connect_method (25 samples, 0.06%)</title><rect x="0.3509%" y="53" width="0.0552%" height="15" fill="rgb(251,118,11)" fg:x="159" fg:w="25"/><text x="0.6009%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (25 samples, 0.06%)</title><rect x="0.3509%" y="37" width="0.0552%" height="15" fill="rgb(217,147,25)" fg:x="159" fg:w="25"/><text x="0.6009%" y="47.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (28 samples, 0.06%)</title><rect x="0.3509%" y="101" width="0.0618%" height="15" fill="rgb(247,81,37)" fg:x="159" fg:w="28"/><text x="0.6009%" y="111.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (92 samples, 0.20%)</title><rect x="0.2119%" y="133" width="0.2031%" height="15" fill="rgb(209,12,38)" fg:x="96" fg:w="92"/><text x="0.4619%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithPrimaryBuffer:heapIndex:bufferIndex:bufferOffset:length:args:argsSize:] (30 samples, 0.07%)</title><rect x="0.3487%" y="117" width="0.0662%" height="15" fill="rgb(227,1,9)" fg:x="158" fg:w="30"/><text x="0.5987%" y="127.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (93 samples, 0.21%)</title><rect x="0.2119%" y="149" width="0.2053%" height="15" fill="rgb(248,47,43)" fg:x="96" fg:w="93"/><text x="0.4619%" y="159.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::create_buffer (102 samples, 0.23%)</title><rect x="0.2075%" y="197" width="0.2251%" height="15" fill="rgb(221,10,30)" fg:x="94" fg:w="102"/><text x="0.4575%" y="207.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (102 samples, 0.23%)</title><rect x="0.2075%" y="181" width="0.2251%" height="15" fill="rgb(210,229,1)" fg:x="94" fg:w="102"/><text x="0.4575%" y="191.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (101 samples, 0.22%)</title><rect x="0.2097%" y="165" width="0.2229%" height="15" fill="rgb(222,148,37)" fg:x="95" fg:w="101"/><text x="0.4597%" y="175.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::device_create_buffer (106 samples, 0.23%)</title><rect x="0.2031%" y="213" width="0.2339%" height="15" fill="rgb(234,67,33)" fg:x="92" fg:w="106"/><text x="0.4531%" y="223.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_buffer (375 samples, 0.83%)</title><rect x="0.2031%" y="229" width="0.8277%" height="15" fill="rgb(247,98,35)" fg:x="92" fg:w="375"/><text x="0.4531%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (267 samples, 0.59%)</title><rect x="0.4414%" y="213" width="0.5893%" height="15" fill="rgb(247,138,52)" fg:x="200" fg:w="267"/><text x="0.6914%" y="223.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::device_create_buffer (376 samples, 0.83%)</title><rect x="0.2031%" y="245" width="0.8299%" height="15" fill="rgb(213,79,30)" fg:x="92" fg:w="376"/><text x="0.4531%" y="255.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (398 samples, 0.88%)</title><rect x="0.1589%" y="261" width="0.8784%" height="15" fill="rgb(246,177,23)" fg:x="72" fg:w="398"/><text x="0.4089%" y="271.50"></text></g><g><title>argten-backend-rust`wgpu::Device::create_bind_group (5 samples, 0.01%)</title><rect x="1.0373%" y="261" width="0.0110%" height="15" fill="rgb(230,62,27)" fg:x="470" fg:w="5"/><text x="1.2873%" y="271.50"></text></g><g><title>argten-backend-rust`show_image::backend::window::WindowHandle::set_image (455 samples, 1.00%)</title><rect x="0.1545%" y="293" width="1.0042%" height="15" fill="rgb(216,154,8)" fg:x="70" fg:w="455"/><text x="0.4045%" y="303.50"></text></g><g><title>argten-backend-rust`show_image::backend::util::gpu_image::GpuImage::from_data (455 samples, 1.00%)</title><rect x="0.1545%" y="277" width="1.0042%" height="15" fill="rgb(244,35,45)" fg:x="70" fg:w="455"/><text x="0.4045%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 0.11%)</title><rect x="1.0484%" y="261" width="0.1104%" height="15" fill="rgb(251,115,12)" fg:x="475" fg:w="50"/><text x="1.2984%" y="271.50"></text></g><g><title>argten-backend-rust`show_image::oneshot::Sender&lt;T&gt;::send (6 samples, 0.01%)</title><rect x="1.1587%" y="293" width="0.0132%" height="15" fill="rgb(240,54,50)" fg:x="525" fg:w="6"/><text x="1.4087%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (6 samples, 0.01%)</title><rect x="1.1587%" y="277" width="0.0132%" height="15" fill="rgb(233,84,52)" fg:x="525" fg:w="6"/><text x="1.4087%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_user_events (484 samples, 1.07%)</title><rect x="0.1081%" y="357" width="1.0682%" height="15" fill="rgb(207,117,47)" fg:x="49" fg:w="484"/><text x="0.3581%" y="367.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run::_{{closure}} (484 samples, 1.07%)</title><rect x="0.1081%" y="341" width="1.0682%" height="15" fill="rgb(249,43,39)" fg:x="49" fg:w="484"/><text x="0.3581%" y="351.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::handle_event (484 samples, 1.07%)</title><rect x="0.1081%" y="325" width="1.0682%" height="15" fill="rgb(209,38,44)" fg:x="49" fg:w="484"/><text x="0.3581%" y="335.50"></text></g><g><title>argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}} (484 samples, 1.07%)</title><rect x="0.1081%" y="309" width="1.0682%" height="15" fill="rgb(236,212,23)" fg:x="49" fg:w="484"/><text x="0.3581%" y="319.50"></text></g><g><title>AGXMetalG13X`AGX::RenderContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::encodeAndEmitRenderState(AGX::G13::VertexProgramVariant const*, AGX::G13::FragmentProgramVariant const*, AGX::ArgumentTable&lt;AGX::G13::Encoders, AGX::G13::Classes&gt;&amp;, AGX::ArgumentTable&lt;AGX::G13::Encoders, AGX::G13::Classes&gt;&amp;, AGX::RenderDirtyBits (5 samples, 0.01%)</title><rect x="1.1962%" y="197" width="0.0110%" height="15" fill="rgb(242,79,21)" fg:x="542" fg:w="5"/><text x="1.4462%" y="207.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyRenderContext drawPrimitives:vertexStart:vertexCount:] (8 samples, 0.02%)</title><rect x="1.1918%" y="213" width="0.0177%" height="15" fill="rgb(211,96,35)" fg:x="540" fg:w="8"/><text x="1.4418%" y="223.50"></text></g><g><title>AGXMetalG13X`AGX::FramebufferGen3_2&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::FramebufferGen3_2 (8 samples, 0.02%)</title><rect x="1.2338%" y="133" width="0.0177%" height="15" fill="rgb(253,215,40)" fg:x="559" fg:w="8"/><text x="1.4838%" y="143.50"></text></g><g><title>AGXMetalG13X`AGX::Framebuffer&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::Framebuffer (8 samples, 0.02%)</title><rect x="1.2338%" y="117" width="0.0177%" height="15" fill="rgb(211,81,21)" fg:x="559" fg:w="8"/><text x="1.4838%" y="127.50"></text></g><g><title>AGXMetalG13X`AGX::RenderContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::beginRenderPass (7 samples, 0.02%)</title><rect x="1.2514%" y="133" width="0.0154%" height="15" fill="rgb(208,190,38)" fg:x="567" fg:w="7"/><text x="1.5014%" y="143.50"></text></g><g><title>AGXMetalG13X`AGX::ContextCommon&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::newCommand (5 samples, 0.01%)</title><rect x="1.2558%" y="117" width="0.0110%" height="15" fill="rgb(235,213,38)" fg:x="569" fg:w="5"/><text x="1.5058%" y="127.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (26 samples, 0.06%)</title><rect x="1.2183%" y="149" width="0.0574%" height="15" fill="rgb(237,122,38)" fg:x="552" fg:w="26"/><text x="1.4683%" y="159.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (31 samples, 0.07%)</title><rect x="1.2183%" y="165" width="0.0684%" height="15" fill="rgb(244,218,35)" fg:x="552" fg:w="31"/><text x="1.4683%" y="175.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (37 samples, 0.08%)</title><rect x="1.2183%" y="181" width="0.0817%" height="15" fill="rgb(240,68,47)" fg:x="552" fg:w="37"/><text x="1.4683%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::render::RenderPassInfo&lt;A&gt;::start (40 samples, 0.09%)</title><rect x="1.2161%" y="213" width="0.0883%" height="15" fill="rgb(210,16,53)" fg:x="551" fg:w="40"/><text x="1.4661%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_render_pass (39 samples, 0.09%)</title><rect x="1.2183%" y="197" width="0.0861%" height="15" fill="rgb(235,124,12)" fg:x="552" fg:w="39"/><text x="1.4683%" y="207.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::render_pass (64 samples, 0.14%)</title><rect x="1.1830%" y="293" width="0.1413%" height="15" fill="rgb(224,169,11)" fg:x="536" fg:w="64"/><text x="1.4330%" y="303.50"></text></g><g><title>argten-backend-rust`core::ptr::drop_in_place&lt;wgpu::RenderPass&gt; (64 samples, 0.14%)</title><rect x="1.1830%" y="277" width="0.1413%" height="15" fill="rgb(250,166,2)" fg:x="536" fg:w="64"/><text x="1.4330%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::command_encoder_end_render_pass (64 samples, 0.14%)</title><rect x="1.1830%" y="261" width="0.1413%" height="15" fill="rgb(242,216,29)" fg:x="536" fg:w="64"/><text x="1.4330%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_end_render_pass (64 samples, 0.14%)</title><rect x="1.1830%" y="245" width="0.1413%" height="15" fill="rgb(230,116,27)" fg:x="536" fg:w="64"/><text x="1.4330%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::render::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (61 samples, 0.13%)</title><rect x="1.1896%" y="229" width="0.1346%" height="15" fill="rgb(228,99,48)" fg:x="539" fg:w="61"/><text x="1.4396%" y="239.50"></text></g><g><title>IOKit`IOConnectCallMethod (17 samples, 0.04%)</title><rect x="1.3419%" y="85" width="0.0375%" height="15" fill="rgb(253,11,6)" fg:x="608" fg:w="17"/><text x="1.5919%" y="95.50"></text></g><g><title>IOKit`io_connect_method (17 samples, 0.04%)</title><rect x="1.3419%" y="69" width="0.0375%" height="15" fill="rgb(247,143,39)" fg:x="608" fg:w="17"/><text x="1.5919%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (16 samples, 0.04%)</title><rect x="1.3441%" y="53" width="0.0353%" height="15" fill="rgb(236,97,10)" fg:x="609" fg:w="16"/><text x="1.5941%" y="63.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (18 samples, 0.04%)</title><rect x="1.3419%" y="101" width="0.0397%" height="15" fill="rgb(233,208,19)" fg:x="608" fg:w="18"/><text x="1.5919%" y="111.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithPrimaryBuffer:heapIndex:bufferIndex:bufferOffset:length:args:argsSize:] (20 samples, 0.04%)</title><rect x="1.3419%" y="133" width="0.0441%" height="15" fill="rgb(216,164,2)" fg:x="608" fg:w="20"/><text x="1.5919%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (20 samples, 0.04%)</title><rect x="1.3419%" y="117" width="0.0441%" height="15" fill="rgb(220,129,5)" fg:x="608" fg:w="20"/><text x="1.5919%" y="127.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (24 samples, 0.05%)</title><rect x="1.3419%" y="149" width="0.0530%" height="15" fill="rgb(242,17,10)" fg:x="608" fg:w="24"/><text x="1.5919%" y="159.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (25 samples, 0.06%)</title><rect x="1.3419%" y="165" width="0.0552%" height="15" fill="rgb(242,107,0)" fg:x="608" fg:w="25"/><text x="1.5919%" y="175.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::device_create_buffer (31 samples, 0.07%)</title><rect x="1.3331%" y="261" width="0.0684%" height="15" fill="rgb(251,28,31)" fg:x="604" fg:w="31"/><text x="1.5831%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_buffer (31 samples, 0.07%)</title><rect x="1.3331%" y="245" width="0.0684%" height="15" fill="rgb(233,223,10)" fg:x="604" fg:w="31"/><text x="1.5831%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::device_create_buffer (31 samples, 0.07%)</title><rect x="1.3331%" y="229" width="0.0684%" height="15" fill="rgb(215,21,27)" fg:x="604" fg:w="31"/><text x="1.5831%" y="239.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::create_buffer (30 samples, 0.07%)</title><rect x="1.3353%" y="213" width="0.0662%" height="15" fill="rgb(232,23,21)" fg:x="605" fg:w="30"/><text x="1.5853%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (29 samples, 0.06%)</title><rect x="1.3375%" y="197" width="0.0640%" height="15" fill="rgb(244,5,23)" fg:x="606" fg:w="29"/><text x="1.5875%" y="207.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (27 samples, 0.06%)</title><rect x="1.3419%" y="181" width="0.0596%" height="15" fill="rgb(226,81,46)" fg:x="608" fg:w="27"/><text x="1.5919%" y="191.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (35 samples, 0.08%)</title><rect x="1.3264%" y="277" width="0.0772%" height="15" fill="rgb(247,70,30)" fg:x="601" fg:w="35"/><text x="1.5764%" y="287.50"></text></g><g><title>AGXMetalG13X`AGX::ContextCommon&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::newCommand (5 samples, 0.01%)</title><rect x="1.4081%" y="165" width="0.0110%" height="15" fill="rgb(212,68,19)" fg:x="638" fg:w="5"/><text x="1.6581%" y="175.50"></text></g><g><title>AGXMetalG13X`AGX::BlitDispatchContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::beginComputePass (6 samples, 0.01%)</title><rect x="1.4081%" y="181" width="0.0132%" height="15" fill="rgb(240,187,13)" fg:x="638" fg:w="6"/><text x="1.6581%" y="191.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyBlitContext copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:] (9 samples, 0.02%)</title><rect x="1.4081%" y="213" width="0.0199%" height="15" fill="rgb(223,113,26)" fg:x="638" fg:w="9"/><text x="1.6581%" y="223.50"></text></g><g><title>AGXMetalG13X`AGX::BlitDispatchContext&lt;AGX::G13::Encoders, AGX::G13::Classes, AGX::G13::ObjClasses&gt;::blitCDMBuffer (9 samples, 0.02%)</title><rect x="1.4081%" y="197" width="0.0199%" height="15" fill="rgb(206,192,2)" fg:x="638" fg:w="9"/><text x="1.6581%" y="207.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (6 samples, 0.01%)</title><rect x="1.4390%" y="181" width="0.0132%" height="15" fill="rgb(241,108,4)" fg:x="652" fg:w="6"/><text x="1.6890%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu::CommandEncoder::copy_buffer_to_buffer (22 samples, 0.05%)</title><rect x="1.4059%" y="277" width="0.0486%" height="15" fill="rgb(247,173,49)" fg:x="637" fg:w="22"/><text x="1.6559%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::command_encoder_copy_buffer_to_buffer (22 samples, 0.05%)</title><rect x="1.4059%" y="261" width="0.0486%" height="15" fill="rgb(224,114,35)" fg:x="637" fg:w="22"/><text x="1.6559%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_copy_buffer_to_buffer (22 samples, 0.05%)</title><rect x="1.4059%" y="245" width="0.0486%" height="15" fill="rgb(245,159,27)" fg:x="637" fg:w="22"/><text x="1.6559%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::transfer::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::command_encoder_copy_buffer_to_buffer (21 samples, 0.05%)</title><rect x="1.4081%" y="229" width="0.0463%" height="15" fill="rgb(245,172,44)" fg:x="638" fg:w="21"/><text x="1.6581%" y="239.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::copy_buffer_to_buffer (7 samples, 0.02%)</title><rect x="1.4390%" y="213" width="0.0154%" height="15" fill="rgb(236,23,11)" fg:x="652" fg:w="7"/><text x="1.6890%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::command::_&lt;impl wgpu_hal::metal::CommandEncoder&gt;::enter_blit (7 samples, 0.02%)</title><rect x="1.4390%" y="197" width="0.0154%" height="15" fill="rgb(205,117,38)" fg:x="652" fg:w="7"/><text x="1.6890%" y="207.50"></text></g><g><title>argten-backend-rust`show_image::backend::util::uniforms_buffer::UniformsBuffer&lt;T&gt;::update_from (59 samples, 0.13%)</title><rect x="1.3264%" y="293" width="0.1302%" height="15" fill="rgb(237,72,25)" fg:x="601" fg:w="59"/><text x="1.5764%" y="303.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyCommandBuffer commitEncoder] (8 samples, 0.02%)</title><rect x="1.4677%" y="197" width="0.0177%" height="15" fill="rgb(244,70,9)" fg:x="665" fg:w="8"/><text x="1.7177%" y="207.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer commit] (6 samples, 0.01%)</title><rect x="1.4854%" y="197" width="0.0132%" height="15" fill="rgb(217,125,39)" fg:x="673" fg:w="6"/><text x="1.7354%" y="207.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyCommandBuffer commit] (15 samples, 0.03%)</title><rect x="1.4677%" y="213" width="0.0331%" height="15" fill="rgb(235,36,10)" fg:x="665" fg:w="15"/><text x="1.7177%" y="223.50"></text></g><g><title>argten-backend-rust`&lt;wgpu_hal::metal::Queue as wgpu_hal::Queue&lt;wgpu_hal::metal::Api&gt;&gt;::submit (21 samples, 0.05%)</title><rect x="1.4655%" y="245" width="0.0463%" height="15" fill="rgb(251,123,47)" fg:x="664" fg:w="21"/><text x="1.7155%" y="255.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (20 samples, 0.04%)</title><rect x="1.4677%" y="229" width="0.0441%" height="15" fill="rgb(221,13,13)" fg:x="665" fg:w="20"/><text x="1.7177%" y="239.50"></text></g><g><title>CoreFoundation`_CFRelease (73 samples, 0.16%)</title><rect x="1.5405%" y="149" width="0.1611%" height="15" fill="rgb(238,131,9)" fg:x="698" fg:w="73"/><text x="1.7905%" y="159.50"></text></g><g><title>IOKit`iokit_user_client_trap (71 samples, 0.16%)</title><rect x="1.5449%" y="133" width="0.1567%" height="15" fill="rgb(211,50,8)" fg:x="700" fg:w="71"/><text x="1.7949%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource dealloc] (81 samples, 0.18%)</title><rect x="1.5405%" y="165" width="0.1788%" height="15" fill="rgb(245,182,24)" fg:x="698" fg:w="81"/><text x="1.7905%" y="175.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::maintain (94 samples, 0.21%)</title><rect x="1.5163%" y="245" width="0.2075%" height="15" fill="rgb(242,14,37)" fg:x="687" fg:w="94"/><text x="1.7663%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::life::NonReferencedResources&lt;A&gt;::clean (85 samples, 0.19%)</title><rect x="1.5361%" y="229" width="0.1876%" height="15" fill="rgb(246,228,12)" fg:x="696" fg:w="85"/><text x="1.7861%" y="239.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyBuffer dealloc] (85 samples, 0.19%)</title><rect x="1.5361%" y="213" width="0.1876%" height="15" fill="rgb(213,55,15)" fg:x="696" fg:w="85"/><text x="1.7861%" y="223.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer dealloc] (85 samples, 0.19%)</title><rect x="1.5361%" y="197" width="0.1876%" height="15" fill="rgb(209,9,3)" fg:x="696" fg:w="85"/><text x="1.7861%" y="207.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer dealloc] (85 samples, 0.19%)</title><rect x="1.5361%" y="181" width="0.1876%" height="15" fill="rgb(230,59,30)" fg:x="696" fg:w="85"/><text x="1.7861%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::queue::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::queue_submit (121 samples, 0.27%)</title><rect x="1.4633%" y="261" width="0.2671%" height="15" fill="rgb(209,121,21)" fg:x="663" fg:w="121"/><text x="1.7133%" y="271.50"></text></g><g><title>argten-backend-rust`wgpu::Queue::submit (123 samples, 0.27%)</title><rect x="1.4611%" y="293" width="0.2715%" height="15" fill="rgb(220,109,13)" fg:x="662" fg:w="123"/><text x="1.7111%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::queue_submit (123 samples, 0.27%)</title><rect x="1.4611%" y="277" width="0.2715%" height="15" fill="rgb(232,18,1)" fg:x="662" fg:w="123"/><text x="1.7111%" y="287.50"></text></g><g><title>QuartzCore`CAImageQueueCollect_ (8 samples, 0.02%)</title><rect x="1.7414%" y="165" width="0.0177%" height="15" fill="rgb(215,41,42)" fg:x="789" fg:w="8"/><text x="1.9914%" y="175.50"></text></g><g><title>QuartzCore`release_images(_CAImageQueue*, CAImageQueueReleased*) (6 samples, 0.01%)</title><rect x="1.7458%" y="149" width="0.0132%" height="15" fill="rgb(224,123,36)" fg:x="791" fg:w="6"/><text x="1.9958%" y="159.50"></text></g><g><title>QuartzCore`CAImageQueueDidComposite (5 samples, 0.01%)</title><rect x="1.7480%" y="133" width="0.0110%" height="15" fill="rgb(240,125,3)" fg:x="792" fg:w="5"/><text x="1.9980%" y="143.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (13 samples, 0.03%)</title><rect x="1.7370%" y="213" width="0.0287%" height="15" fill="rgb(205,98,50)" fg:x="787" fg:w="13"/><text x="1.9870%" y="223.50"></text></g><g><title>QuartzCore`-[CAMetalLayer nextDrawable] (13 samples, 0.03%)</title><rect x="1.7370%" y="197" width="0.0287%" height="15" fill="rgb(205,185,37)" fg:x="787" fg:w="13"/><text x="1.9870%" y="207.50"></text></g><g><title>QuartzCore`CAMetalLayerPrivateNextDrawableLocked(CAMetalLayer*, CAMetalDrawable**, unsigned long*) (13 samples, 0.03%)</title><rect x="1.7370%" y="181" width="0.0287%" height="15" fill="rgb(238,207,15)" fg:x="787" fg:w="13"/><text x="1.9870%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu::Surface::get_current_texture (16 samples, 0.04%)</title><rect x="1.7325%" y="293" width="0.0353%" height="15" fill="rgb(213,199,42)" fg:x="785" fg:w="16"/><text x="1.9825%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::surface_get_current_texture (16 samples, 0.04%)</title><rect x="1.7325%" y="277" width="0.0353%" height="15" fill="rgb(235,201,11)" fg:x="785" fg:w="16"/><text x="1.9825%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_get_current_texture (16 samples, 0.04%)</title><rect x="1.7325%" y="261" width="0.0353%" height="15" fill="rgb(207,46,11)" fg:x="785" fg:w="16"/><text x="1.9825%" y="271.50"></text></g><g><title>argten-backend-rust`wgpu_core::present::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::surface_get_current_texture (14 samples, 0.03%)</title><rect x="1.7370%" y="245" width="0.0309%" height="15" fill="rgb(241,35,35)" fg:x="787" fg:w="14"/><text x="1.9870%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::surface::_&lt;impl wgpu_hal::Surface&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Surface&gt;::acquire_texture (14 samples, 0.03%)</title><rect x="1.7370%" y="229" width="0.0309%" height="15" fill="rgb(243,32,47)" fg:x="787" fg:w="14"/><text x="1.9870%" y="239.50"></text></g><g><title>argten-backend-rust`&lt;wgpu_hal::metal::Queue as wgpu_hal::Queue&lt;wgpu_hal::metal::Api&gt;&gt;::present (6 samples, 0.01%)</title><rect x="1.7679%" y="229" width="0.0132%" height="15" fill="rgb(247,202,23)" fg:x="801" fg:w="6"/><text x="2.0179%" y="239.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (6 samples, 0.01%)</title><rect x="1.7679%" y="213" width="0.0132%" height="15" fill="rgb(219,102,11)" fg:x="801" fg:w="6"/><text x="2.0179%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu::SurfaceTexture::present (7 samples, 0.02%)</title><rect x="1.7679%" y="293" width="0.0154%" height="15" fill="rgb(243,110,44)" fg:x="801" fg:w="7"/><text x="2.0179%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::surface_present (7 samples, 0.02%)</title><rect x="1.7679%" y="277" width="0.0154%" height="15" fill="rgb(222,74,54)" fg:x="801" fg:w="7"/><text x="2.0179%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_present (7 samples, 0.02%)</title><rect x="1.7679%" y="261" width="0.0154%" height="15" fill="rgb(216,99,12)" fg:x="801" fg:w="7"/><text x="2.0179%" y="271.50"></text></g><g><title>argten-backend-rust`wgpu_core::present::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::surface_present (7 samples, 0.02%)</title><rect x="1.7679%" y="245" width="0.0154%" height="15" fill="rgb(226,22,26)" fg:x="801" fg:w="7"/><text x="2.0179%" y="255.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run::_{{closure}} (274 samples, 0.60%)</title><rect x="1.1808%" y="325" width="0.6047%" height="15" fill="rgb(217,163,10)" fg:x="535" fg:w="274"/><text x="1.4308%" y="335.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::handle_event (274 samples, 0.60%)</title><rect x="1.1808%" y="309" width="0.6047%" height="15" fill="rgb(213,25,53)" fg:x="535" fg:w="274"/><text x="1.4308%" y="319.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (786 samples, 1.73%)</title><rect x="0.0530%" y="421" width="1.7348%" height="15" fill="rgb(252,105,26)" fg:x="24" fg:w="786"/><text x="0.3030%" y="431.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::observer::control_flow_end_handler (763 samples, 1.68%)</title><rect x="0.1037%" y="405" width="1.6840%" height="15" fill="rgb(220,39,43)" fg:x="47" fg:w="763"/><text x="0.3537%" y="415.50"></text></g><g><title>argten-backend-rust`std::panicking::try (763 samples, 1.68%)</title><rect x="0.1037%" y="389" width="1.6840%" height="15" fill="rgb(229,68,48)" fg:x="47" fg:w="763"/><text x="0.3537%" y="399.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app_state::AppState::cleared (762 samples, 1.68%)</title><rect x="0.1059%" y="373" width="1.6818%" height="15" fill="rgb(252,8,32)" fg:x="48" fg:w="762"/><text x="0.3559%" y="383.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (275 samples, 0.61%)</title><rect x="1.1808%" y="357" width="0.6069%" height="15" fill="rgb(223,20,43)" fg:x="535" fg:w="275"/><text x="1.4308%" y="367.50"></text></g><g><title>argten-backend-rust`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event (275 samples, 0.61%)</title><rect x="1.1808%" y="341" width="0.6069%" height="15" fill="rgb(229,81,49)" fg:x="535" fg:w="275"/><text x="1.4308%" y="351.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (797 samples, 1.76%)</title><rect x="0.0486%" y="437" width="1.7590%" height="15" fill="rgb(236,28,36)" fg:x="22" fg:w="797"/><text x="0.2986%" y="447.50"></text></g><g><title>CoreFoundation`__CFRunLoopServiceMachPort (14 samples, 0.03%)</title><rect x="1.8142%" y="437" width="0.0309%" height="15" fill="rgb(249,185,26)" fg:x="822" fg:w="14"/><text x="2.0642%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (14 samples, 0.03%)</title><rect x="1.8142%" y="421" width="0.0309%" height="15" fill="rgb(249,174,33)" fg:x="822" fg:w="14"/><text x="2.0642%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (14 samples, 0.03%)</title><rect x="1.8142%" y="405" width="0.0309%" height="15" fill="rgb(233,201,37)" fg:x="822" fg:w="14"/><text x="2.0642%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (14 samples, 0.03%)</title><rect x="1.8142%" y="389" width="0.0309%" height="15" fill="rgb(221,78,26)" fg:x="822" fg:w="14"/><text x="2.0642%" y="399.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (828 samples, 1.83%)</title><rect x="0.0309%" y="453" width="1.8275%" height="15" fill="rgb(250,127,30)" fg:x="14" fg:w="828"/><text x="0.2809%" y="463.50">C..</text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (830 samples, 1.83%)</title><rect x="0.0287%" y="469" width="1.8319%" height="15" fill="rgb(230,49,44)" fg:x="13" fg:w="830"/><text x="0.2787%" y="479.50">C..</text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run (844 samples, 1.86%)</title><rect x="0.0022%" y="597" width="1.8628%" height="15" fill="rgb(229,67,23)" fg:x="1" fg:w="844"/><text x="0.2522%" y="607.50">a..</text></g><g><title>argten-backend-rust`winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::run (844 samples, 1.86%)</title><rect x="0.0022%" y="581" width="1.8628%" height="15" fill="rgb(249,83,47)" fg:x="1" fg:w="844"/><text x="0.2522%" y="591.50">a..</text></g><g><title>AppKit`-[NSApplication run] (844 samples, 1.86%)</title><rect x="0.0022%" y="565" width="1.8628%" height="15" fill="rgb(215,43,3)" fg:x="1" fg:w="844"/><text x="0.2522%" y="575.50">A..</text></g><g><title>AppKit`-[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (838 samples, 1.85%)</title><rect x="0.0154%" y="549" width="1.8495%" height="15" fill="rgb(238,154,13)" fg:x="7" fg:w="838"/><text x="0.2654%" y="559.50">A..</text></g><g><title>AppKit`_DPSNextEvent (838 samples, 1.85%)</title><rect x="0.0154%" y="533" width="1.8495%" height="15" fill="rgb(219,56,2)" fg:x="7" fg:w="838"/><text x="0.2654%" y="543.50">A..</text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (833 samples, 1.84%)</title><rect x="0.0265%" y="517" width="1.8385%" height="15" fill="rgb(233,0,4)" fg:x="12" fg:w="833"/><text x="0.2765%" y="527.50">H..</text></g><g><title>HIToolbox`ReceiveNextEventCommon (833 samples, 1.84%)</title><rect x="0.0265%" y="501" width="1.8385%" height="15" fill="rgb(235,30,7)" fg:x="12" fg:w="833"/><text x="0.2765%" y="511.50">H..</text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (832 samples, 1.84%)</title><rect x="0.0287%" y="485" width="1.8363%" height="15" fill="rgb(250,79,13)" fg:x="13" fg:w="832"/><text x="0.2787%" y="495.50">H..</text></g><g><title>AppKit`+[NSApplication sharedApplication] (13 samples, 0.03%)</title><rect x="1.8650%" y="533" width="0.0287%" height="15" fill="rgb(211,146,34)" fg:x="845" fg:w="13"/><text x="2.1150%" y="543.50"></text></g><g><title>AppKit`-[NSApplication init] (13 samples, 0.03%)</title><rect x="1.8650%" y="517" width="0.0287%" height="15" fill="rgb(228,22,38)" fg:x="845" fg:w="13"/><text x="2.1150%" y="527.50"></text></g><g><title>AppKit`_NSInitializeAppContext (5 samples, 0.01%)</title><rect x="1.8826%" y="501" width="0.0110%" height="15" fill="rgb(235,168,5)" fg:x="853" fg:w="5"/><text x="2.1326%" y="511.50"></text></g><g><title>AppKit`+[NSMenuBarPresentationInstance _isMenuBarVisible] (5 samples, 0.01%)</title><rect x="1.8826%" y="485" width="0.0110%" height="15" fill="rgb(221,155,16)" fg:x="853" fg:w="5"/><text x="2.1326%" y="495.50"></text></g><g><title>dyld`start (860 samples, 1.90%)</title><rect x="0.0000%" y="709" width="1.8981%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="860"/><text x="0.2500%" y="719.50">d..</text></g><g><title>argten-backend-rust`main (860 samples, 1.90%)</title><rect x="0.0000%" y="693" width="1.8981%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="860"/><text x="0.2500%" y="703.50">a..</text></g><g><title>argten-backend-rust`std::rt::lang_start_internal (859 samples, 1.90%)</title><rect x="0.0022%" y="677" width="1.8959%" height="15" fill="rgb(234,103,6)" fg:x="1" fg:w="859"/><text x="0.2522%" y="687.50">a..</text></g><g><title>argten-backend-rust`std::rt::lang_start::_{{closure}} (859 samples, 1.90%)</title><rect x="0.0022%" y="661" width="1.8959%" height="15" fill="rgb(227,97,0)" fg:x="1" fg:w="859"/><text x="0.2522%" y="671.50">a..</text></g><g><title>argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace (859 samples, 1.90%)</title><rect x="0.0022%" y="645" width="1.8959%" height="15" fill="rgb(234,150,53)" fg:x="1" fg:w="859"/><text x="0.2522%" y="655.50">a..</text></g><g><title>argten-backend-rust`argten_backend_rust::main::main (859 samples, 1.90%)</title><rect x="0.0022%" y="629" width="1.8959%" height="15" fill="rgb(228,201,54)" fg:x="1" fg:w="859"/><text x="0.2522%" y="639.50">a..</text></g><g><title>argten-backend-rust`show_image::backend::run_context (859 samples, 1.90%)</title><rect x="0.0022%" y="613" width="1.8959%" height="15" fill="rgb(222,22,37)" fg:x="1" fg:w="859"/><text x="0.2522%" y="623.50">a..</text></g><g><title>argten-backend-rust`show_image::backend::initialize_context_or_exit (15 samples, 0.03%)</title><rect x="1.8650%" y="597" width="0.0331%" height="15" fill="rgb(237,53,32)" fg:x="845" fg:w="15"/><text x="2.1150%" y="607.50"></text></g><g><title>argten-backend-rust`show_image::backend::initialize_context (15 samples, 0.03%)</title><rect x="1.8650%" y="581" width="0.0331%" height="15" fill="rgb(233,25,53)" fg:x="845" fg:w="15"/><text x="2.1150%" y="591.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::new (15 samples, 0.03%)</title><rect x="1.8650%" y="565" width="0.0331%" height="15" fill="rgb(210,40,34)" fg:x="845" fg:w="15"/><text x="2.1150%" y="575.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::new (15 samples, 0.03%)</title><rect x="1.8650%" y="549" width="0.0331%" height="15" fill="rgb(241,220,44)" fg:x="845" fg:w="15"/><text x="2.1150%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (304 samples, 0.67%)</title><rect x="1.9422%" y="693" width="0.6709%" height="15" fill="rgb(235,28,35)" fg:x="880" fg:w="304"/><text x="2.1922%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_kevent_worker_thread (8 samples, 0.02%)</title><rect x="2.6154%" y="677" width="0.0177%" height="15" fill="rgb(210,56,17)" fg:x="1185" fg:w="8"/><text x="2.8654%" y="687.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_merge (8 samples, 0.02%)</title><rect x="2.6374%" y="661" width="0.0177%" height="15" fill="rgb(224,130,29)" fg:x="1195" fg:w="8"/><text x="2.8874%" y="671.50"></text></g><g><title>QuartzCore`layer_presented(_CAImageQueue*, unsigned int, double, double, void*) (8 samples, 0.02%)</title><rect x="2.6683%" y="581" width="0.0177%" height="15" fill="rgb(235,212,8)" fg:x="1209" fg:w="8"/><text x="2.9183%" y="591.50"></text></g><g><title>QuartzCore`invoke_presented_callback(void*) (11 samples, 0.02%)</title><rect x="2.6661%" y="597" width="0.0243%" height="15" fill="rgb(223,33,50)" fg:x="1208" fg:w="11"/><text x="2.9161%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (13 samples, 0.03%)</title><rect x="2.6639%" y="613" width="0.0287%" height="15" fill="rgb(219,149,13)" fg:x="1207" fg:w="13"/><text x="2.9139%" y="623.50"></text></g><g><title>IOKit`__IODataQueueDequeue (5 samples, 0.01%)</title><rect x="2.6970%" y="485" width="0.0110%" height="15" fill="rgb(250,156,29)" fg:x="1222" fg:w="5"/><text x="2.9470%" y="495.50"></text></g><g><title>QuartzCore`CAImageQueuePing_ (13 samples, 0.03%)</title><rect x="2.7191%" y="389" width="0.0287%" height="15" fill="rgb(216,193,19)" fg:x="1232" fg:w="13"/><text x="2.9691%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (13 samples, 0.03%)</title><rect x="2.7191%" y="373" width="0.0287%" height="15" fill="rgb(216,135,14)" fg:x="1232" fg:w="13"/><text x="2.9691%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (13 samples, 0.03%)</title><rect x="2.7191%" y="357" width="0.0287%" height="15" fill="rgb(241,47,5)" fg:x="1232" fg:w="13"/><text x="2.9691%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (13 samples, 0.03%)</title><rect x="2.7191%" y="341" width="0.0287%" height="15" fill="rgb(233,42,35)" fg:x="1232" fg:w="13"/><text x="2.9691%" y="351.50"></text></g><g><title>QuartzCore`layer_private_present_impl(_CAMetalLayerPrivate*, CAMetalDrawable*, double, unsigned int) (17 samples, 0.04%)</title><rect x="2.7125%" y="421" width="0.0375%" height="15" fill="rgb(231,13,6)" fg:x="1229" fg:w="17"/><text x="2.9625%" y="431.50"></text></g><g><title>QuartzCore`CAImageQueueInsertImage_ (16 samples, 0.04%)</title><rect x="2.7147%" y="405" width="0.0353%" height="15" fill="rgb(207,181,40)" fg:x="1230" fg:w="16"/><text x="2.9647%" y="415.50"></text></g><g><title>QuartzCore`-[CAMetalDrawable present] (21 samples, 0.05%)</title><rect x="2.7103%" y="437" width="0.0463%" height="15" fill="rgb(254,173,49)" fg:x="1228" fg:w="21"/><text x="2.9603%" y="447.50"></text></g><g><title>Metal`__45-[_MTLCommandBuffer presentDrawable:options:]_block_invoke (22 samples, 0.05%)</title><rect x="2.7103%" y="453" width="0.0486%" height="15" fill="rgb(221,1,38)" fg:x="1228" fg:w="22"/><text x="2.9603%" y="463.50"></text></g><g><title>Metal`MTLDispatchListApply (24 samples, 0.05%)</title><rect x="2.7103%" y="469" width="0.0530%" height="15" fill="rgb(206,124,46)" fg:x="1228" fg:w="24"/><text x="2.9603%" y="479.50"></text></g><g><title>Metal`-[_MTLCommandBuffer didScheduleWithStartTime:endTime:error:] (26 samples, 0.06%)</title><rect x="2.7081%" y="485" width="0.0574%" height="15" fill="rgb(249,21,11)" fg:x="1227" fg:w="26"/><text x="2.9581%" y="495.50"></text></g><g><title>IOGPU`_iogpuMetalCommandBufferStorageReleaseCurrentResources (10 samples, 0.02%)</title><rect x="2.7809%" y="421" width="0.0221%" height="15" fill="rgb(222,201,40)" fg:x="1260" fg:w="10"/><text x="3.0309%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.02%)</title><rect x="2.7875%" y="405" width="0.0154%" height="15" fill="rgb(235,61,29)" fg:x="1263" fg:w="7"/><text x="3.0375%" y="415.50"></text></g><g><title>IOGPU`IOGPUMetalCommandBufferStorageDealloc (19 samples, 0.04%)</title><rect x="2.7787%" y="453" width="0.0419%" height="15" fill="rgb(219,207,3)" fg:x="1259" fg:w="19"/><text x="3.0287%" y="463.50"></text></g><g><title>IOGPU`IOGPUMetalCommandBufferStorageReset (19 samples, 0.04%)</title><rect x="2.7787%" y="437" width="0.0419%" height="15" fill="rgb(222,56,46)" fg:x="1259" fg:w="19"/><text x="3.0287%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.01%)</title><rect x="2.8074%" y="421" width="0.0132%" height="15" fill="rgb(239,76,54)" fg:x="1272" fg:w="6"/><text x="3.0574%" y="431.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer didCompleteWithStartTime:endTime:error:] (21 samples, 0.05%)</title><rect x="2.7787%" y="469" width="0.0463%" height="15" fill="rgb(231,124,27)" fg:x="1259" fg:w="21"/><text x="3.0287%" y="479.50"></text></g><g><title>Metal`-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (30 samples, 0.07%)</title><rect x="2.7655%" y="485" width="0.0662%" height="15" fill="rgb(249,195,6)" fg:x="1253" fg:w="30"/><text x="3.0155%" y="495.50"></text></g><g><title>libsystem_blocks.dylib`_Block_release (6 samples, 0.01%)</title><rect x="2.8361%" y="485" width="0.0132%" height="15" fill="rgb(237,174,47)" fg:x="1285" fg:w="6"/><text x="3.0861%" y="495.50"></text></g><g><title>IOGPU`IOGPUNotificationQueueDispatchAvailableCompletionNotifications (72 samples, 0.16%)</title><rect x="2.6948%" y="501" width="0.1589%" height="15" fill="rgb(206,201,31)" fg:x="1221" fg:w="72"/><text x="2.9448%" y="511.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (80 samples, 0.18%)</title><rect x="2.6926%" y="613" width="0.1766%" height="15" fill="rgb(231,57,52)" fg:x="1220" fg:w="80"/><text x="2.9426%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (80 samples, 0.18%)</title><rect x="2.6926%" y="597" width="0.1766%" height="15" fill="rgb(248,177,22)" fg:x="1220" fg:w="80"/><text x="2.9426%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_invoke (80 samples, 0.18%)</title><rect x="2.6926%" y="581" width="0.1766%" height="15" fill="rgb(215,211,37)" fg:x="1220" fg:w="80"/><text x="2.9426%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (79 samples, 0.17%)</title><rect x="2.6948%" y="565" width="0.1744%" height="15" fill="rgb(241,128,51)" fg:x="1221" fg:w="79"/><text x="2.9448%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_invoke (79 samples, 0.17%)</title><rect x="2.6948%" y="549" width="0.1744%" height="15" fill="rgb(227,165,31)" fg:x="1221" fg:w="79"/><text x="2.9448%" y="559.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout4 (79 samples, 0.17%)</title><rect x="2.6948%" y="533" width="0.1744%" height="15" fill="rgb(228,167,24)" fg:x="1221" fg:w="79"/><text x="2.9448%" y="543.50"></text></g><g><title>IOGPU`__IOGPUNotificationQueueSetDispatchQueue_block_invoke (79 samples, 0.17%)</title><rect x="2.6948%" y="517" width="0.1744%" height="15" fill="rgb(228,143,12)" fg:x="1221" fg:w="79"/><text x="2.9448%" y="527.50"></text></g><g><title>IOGPU`IOGPUCommandQueueSubmitCommandBuffers (337 samples, 0.74%)</title><rect x="2.8913%" y="501" width="0.7438%" height="15" fill="rgb(249,149,8)" fg:x="1310" fg:w="337"/><text x="3.1413%" y="511.50"></text></g><g><title>IOKit`IOConnectCallMethod (335 samples, 0.74%)</title><rect x="2.8957%" y="485" width="0.7394%" height="15" fill="rgb(243,35,44)" fg:x="1312" fg:w="335"/><text x="3.1457%" y="495.50"></text></g><g><title>IOKit`io_connect_method (335 samples, 0.74%)</title><rect x="2.8957%" y="469" width="0.7394%" height="15" fill="rgb(246,89,9)" fg:x="1312" fg:w="335"/><text x="3.1457%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (335 samples, 0.74%)</title><rect x="2.8957%" y="453" width="0.7394%" height="15" fill="rgb(233,213,13)" fg:x="1312" fg:w="335"/><text x="3.1457%" y="463.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (346 samples, 0.76%)</title><rect x="2.8802%" y="533" width="0.7636%" height="15" fill="rgb(233,141,41)" fg:x="1305" fg:w="346"/><text x="3.1302%" y="543.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (346 samples, 0.76%)</title><rect x="2.8802%" y="517" width="0.7636%" height="15" fill="rgb(239,167,4)" fg:x="1305" fg:w="346"/><text x="3.1302%" y="527.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (349 samples, 0.77%)</title><rect x="2.8758%" y="549" width="0.7703%" height="15" fill="rgb(209,217,16)" fg:x="1303" fg:w="349"/><text x="3.1258%" y="559.50"></text></g><g><title>QuartzCore`layer_composited(_CAImageQueue*, void*, unsigned int, unsigned int) (6 samples, 0.01%)</title><rect x="3.6593%" y="501" width="0.0132%" height="15" fill="rgb(219,88,35)" fg:x="1658" fg:w="6"/><text x="3.9093%" y="511.50"></text></g><g><title>QuartzCore`_XImageQueueDidComposite (10 samples, 0.02%)</title><rect x="3.6527%" y="533" width="0.0221%" height="15" fill="rgb(220,193,23)" fg:x="1655" fg:w="10"/><text x="3.9027%" y="543.50"></text></g><g><title>QuartzCore`CAImageQueueDidComposite (10 samples, 0.02%)</title><rect x="3.6527%" y="517" width="0.0221%" height="15" fill="rgb(230,90,52)" fg:x="1655" fg:w="10"/><text x="3.9027%" y="527.50"></text></g><g><title>QuartzCore`CARenderServerProcessClientMessage (26 samples, 0.06%)</title><rect x="3.6483%" y="549" width="0.0574%" height="15" fill="rgb(252,106,19)" fg:x="1653" fg:w="26"/><text x="3.8983%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (10 samples, 0.02%)</title><rect x="3.6836%" y="533" width="0.0221%" height="15" fill="rgb(206,74,20)" fg:x="1669" fg:w="10"/><text x="3.9336%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (10 samples, 0.02%)</title><rect x="3.6836%" y="517" width="0.0221%" height="15" fill="rgb(230,138,44)" fg:x="1669" fg:w="10"/><text x="3.9336%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (10 samples, 0.02%)</title><rect x="3.6836%" y="501" width="0.0221%" height="15" fill="rgb(235,182,43)" fg:x="1669" fg:w="10"/><text x="3.9336%" y="511.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (377 samples, 0.83%)</title><rect x="2.8758%" y="565" width="0.8321%" height="15" fill="rgb(242,16,51)" fg:x="1303" fg:w="377"/><text x="3.1258%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (379 samples, 0.84%)</title><rect x="2.8736%" y="613" width="0.8365%" height="15" fill="rgb(248,9,4)" fg:x="1302" fg:w="379"/><text x="3.1236%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_latch_and_call (378 samples, 0.83%)</title><rect x="2.8758%" y="597" width="0.8343%" height="15" fill="rgb(210,31,22)" fg:x="1303" fg:w="378"/><text x="3.1258%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_continuation_pop (378 samples, 0.83%)</title><rect x="2.8758%" y="581" width="0.8343%" height="15" fill="rgb(239,54,39)" fg:x="1303" fg:w="378"/><text x="3.1258%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (476 samples, 1.05%)</title><rect x="2.6617%" y="629" width="1.0506%" height="15" fill="rgb(230,99,41)" fg:x="1206" fg:w="476"/><text x="2.9117%" y="639.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (479 samples, 1.06%)</title><rect x="2.6595%" y="645" width="1.0572%" height="15" fill="rgb(253,106,12)" fg:x="1205" fg:w="479"/><text x="2.9095%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain_deferred_wlh (480 samples, 1.06%)</title><rect x="2.6595%" y="661" width="1.0594%" height="15" fill="rgb(213,46,41)" fg:x="1205" fg:w="480"/><text x="2.9095%" y="671.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (825 samples, 1.82%)</title><rect x="1.9025%" y="709" width="1.8208%" height="15" fill="rgb(215,133,35)" fg:x="862" fg:w="825"/><text x="2.1525%" y="719.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (502 samples, 1.11%)</title><rect x="2.6154%" y="693" width="1.1079%" height="15" fill="rgb(213,28,5)" fg:x="1185" fg:w="502"/><text x="2.8654%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (493 samples, 1.09%)</title><rect x="2.6352%" y="677" width="1.0881%" height="15" fill="rgb(215,77,49)" fg:x="1194" fg:w="493"/><text x="2.8852%" y="687.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (36 samples, 0.08%)</title><rect x="14.7719%" y="597" width="0.0795%" height="15" fill="rgb(248,100,22)" fg:x="6693" fg:w="36"/><text x="15.0219%" y="607.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::point::Point::mutate (5 samples, 0.01%)</title><rect x="14.8580%" y="597" width="0.0110%" height="15" fill="rgb(208,67,9)" fg:x="6732" fg:w="5"/><text x="15.1080%" y="607.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (237 samples, 0.52%)</title><rect x="14.8999%" y="565" width="0.5231%" height="15" fill="rgb(219,133,21)" fg:x="6751" fg:w="237"/><text x="15.1499%" y="575.50"></text></g><g><title>argten-backend-rust`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (5 samples, 0.01%)</title><rect x="15.4892%" y="549" width="0.0110%" height="15" fill="rgb(246,46,29)" fg:x="7018" fg:w="5"/><text x="15.7392%" y="559.50"></text></g><g><title>argten-backend-rust`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (5 samples, 0.01%)</title><rect x="15.4892%" y="533" width="0.0110%" height="15" fill="rgb(246,185,52)" fg:x="7018" fg:w="5"/><text x="15.7392%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (5 samples, 0.01%)</title><rect x="15.4892%" y="517" width="0.0110%" height="15" fill="rgb(252,136,11)" fg:x="7018" fg:w="5"/><text x="15.7392%" y="527.50"></text></g><g><title>argten-backend-rust`rand::rngs::thread::thread_rng (13 samples, 0.03%)</title><rect x="15.5002%" y="549" width="0.0287%" height="15" fill="rgb(219,138,53)" fg:x="7023" fg:w="13"/><text x="15.7502%" y="559.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::color::Color::mutate (345 samples, 0.76%)</title><rect x="14.8800%" y="581" width="0.7614%" height="15" fill="rgb(211,51,23)" fg:x="6742" fg:w="345"/><text x="15.1300%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (99 samples, 0.22%)</title><rect x="15.4230%" y="565" width="0.2185%" height="15" fill="rgb(247,221,28)" fg:x="6988" fg:w="99"/><text x="15.6730%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (51 samples, 0.11%)</title><rect x="15.5289%" y="549" width="0.1126%" height="15" fill="rgb(251,222,45)" fg:x="7036" fg:w="51"/><text x="15.7789%" y="559.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (129 samples, 0.28%)</title><rect x="15.6525%" y="565" width="0.2847%" height="15" fill="rgb(217,162,53)" fg:x="7092" fg:w="129"/><text x="15.9025%" y="575.50"></text></g><g><title>argten-backend-rust`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (5 samples, 0.01%)</title><rect x="15.9725%" y="549" width="0.0110%" height="15" fill="rgb(229,93,14)" fg:x="7237" fg:w="5"/><text x="16.2225%" y="559.50"></text></g><g><title>argten-backend-rust`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (5 samples, 0.01%)</title><rect x="15.9725%" y="533" width="0.0110%" height="15" fill="rgb(209,67,49)" fg:x="7237" fg:w="5"/><text x="16.2225%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (5 samples, 0.01%)</title><rect x="15.9725%" y="517" width="0.0110%" height="15" fill="rgb(213,87,29)" fg:x="7237" fg:w="5"/><text x="16.2225%" y="527.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (41 samples, 0.09%)</title><rect x="15.9372%" y="565" width="0.0905%" height="15" fill="rgb(205,151,52)" fg:x="7221" fg:w="41"/><text x="16.1872%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.04%)</title><rect x="15.9836%" y="549" width="0.0441%" height="15" fill="rgb(253,215,39)" fg:x="7242" fg:w="20"/><text x="16.2336%" y="559.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::point::Point::mutate (177 samples, 0.39%)</title><rect x="15.6415%" y="581" width="0.3907%" height="15" fill="rgb(221,220,41)" fg:x="7087" fg:w="177"/><text x="15.8915%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (17 samples, 0.04%)</title><rect x="16.0321%" y="581" width="0.0375%" height="15" fill="rgb(218,133,21)" fg:x="7264" fg:w="17"/><text x="16.2821%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::drawing::Drawing::mutate (604 samples, 1.33%)</title><rect x="14.7697%" y="613" width="1.3331%" height="15" fill="rgb(221,193,43)" fg:x="6692" fg:w="604"/><text x="15.0197%" y="623.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::polygon::Polygon::mutate (559 samples, 1.23%)</title><rect x="14.8690%" y="597" width="1.2338%" height="15" fill="rgb(240,128,52)" fg:x="6737" fg:w="559"/><text x="15.1190%" y="607.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.03%)</title><rect x="16.0719%" y="581" width="0.0309%" height="15" fill="rgb(253,114,12)" fg:x="7282" fg:w="14"/><text x="16.3219%" y="591.50"></text></g><g><title>argten-backend-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.05%)</title><rect x="99.1194%" y="597" width="0.0463%" height="15" fill="rgb(215,223,47)" fg:x="44910" fg:w="21"/><text x="99.3694%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="99.1723%" y="597" width="0.0221%" height="15" fill="rgb(248,225,23)" fg:x="44934" fg:w="10"/><text x="99.4223%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.04%)</title><rect x="99.1944%" y="597" width="0.0441%" height="15" fill="rgb(250,108,0)" fg:x="44944" fg:w="20"/><text x="99.4444%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.04%)</title><rect x="99.2386%" y="597" width="0.0441%" height="15" fill="rgb(228,208,7)" fg:x="44964" fg:w="20"/><text x="99.4886%" y="607.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::fill_shape_2 (37,690 samples, 83.18%)</title><rect x="16.1050%" y="613" width="83.1844%" height="15" fill="rgb(244,45,10)" fg:x="7297" fg:w="37690"/><text x="16.3550%" y="623.50">argten-backend-rust`argten_backend_rust::utils::fill_shape_2</text></g><g><title>argten-backend-rust`image::dynimage::DynamicImage::resize_exact (18 samples, 0.04%)</title><rect x="99.2893%" y="613" width="0.0397%" height="15" fill="rgb(207,125,25)" fg:x="44987" fg:w="18"/><text x="99.5393%" y="623.50"></text></g><g><title>argten-backend-rust`image::imageops::sample::resize (18 samples, 0.04%)</title><rect x="99.2893%" y="597" width="0.0397%" height="15" fill="rgb(210,195,18)" fg:x="44987" fg:w="18"/><text x="99.5393%" y="607.50"></text></g><g><title>argten-backend-rust`image::imageops::sample::vertical_sample (15 samples, 0.03%)</title><rect x="99.2959%" y="581" width="0.0331%" height="15" fill="rgb(249,80,12)" fg:x="44990" fg:w="15"/><text x="99.5459%" y="591.50"></text></g><g><title>argten-backend-rust`zune_jpeg::mcu_prog::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::parse_entropy_coded_data (19 samples, 0.04%)</title><rect x="99.3357%" y="549" width="0.0419%" height="15" fill="rgb(221,65,9)" fg:x="45008" fg:w="19"/><text x="99.5857%" y="559.50"></text></g><g><title>argten-backend-rust`zune_jpeg::bitstream::BitStream::decode_mcu_ac_refine (16 samples, 0.04%)</title><rect x="99.3423%" y="533" width="0.0353%" height="15" fill="rgb(235,49,36)" fg:x="45011" fg:w="16"/><text x="99.5923%" y="543.50"></text></g><g><title>argten-backend-rust`image::dynimage::decoder_to_image (23 samples, 0.05%)</title><rect x="99.3291%" y="613" width="0.0508%" height="15" fill="rgb(225,32,20)" fg:x="45005" fg:w="23"/><text x="99.5791%" y="623.50"></text></g><g><title>argten-backend-rust`image::image::decoder_to_vec (23 samples, 0.05%)</title><rect x="99.3291%" y="597" width="0.0508%" height="15" fill="rgb(215,141,46)" fg:x="45005" fg:w="23"/><text x="99.5791%" y="607.50"></text></g><g><title>argten-backend-rust`&lt;image::codecs::jpeg::decoder::JpegDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (23 samples, 0.05%)</title><rect x="99.3291%" y="581" width="0.0508%" height="15" fill="rgb(250,160,47)" fg:x="45005" fg:w="23"/><text x="99.5791%" y="591.50"></text></g><g><title>argten-backend-rust`zune_jpeg::mcu_prog::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::decode_mcu_ycbcr_progressive (23 samples, 0.05%)</title><rect x="99.3291%" y="565" width="0.0508%" height="15" fill="rgb(216,222,40)" fg:x="45005" fg:w="23"/><text x="99.5791%" y="575.50"></text></g><g><title>CoreFoundation`CFRunLoopWakeUp (9 samples, 0.02%)</title><rect x="99.3820%" y="597" width="0.0199%" height="15" fill="rgb(234,217,39)" fg:x="45029" fg:w="9"/><text x="99.6320%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (9 samples, 0.02%)</title><rect x="99.3820%" y="581" width="0.0199%" height="15" fill="rgb(207,178,40)" fg:x="45029" fg:w="9"/><text x="99.6320%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (9 samples, 0.02%)</title><rect x="99.3820%" y="565" width="0.0199%" height="15" fill="rgb(221,136,13)" fg:x="45029" fg:w="9"/><text x="99.6320%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (9 samples, 0.02%)</title><rect x="99.3820%" y="549" width="0.0199%" height="15" fill="rgb(249,199,10)" fg:x="45029" fg:w="9"/><text x="99.6320%" y="559.50"></text></g><g><title>argten-backend-rust`show_image::oneshot::Receiver&lt;T&gt;::recv (18 samples, 0.04%)</title><rect x="99.4041%" y="597" width="0.0397%" height="15" fill="rgb(249,222,13)" fg:x="45039" fg:w="18"/><text x="99.6541%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (15 samples, 0.03%)</title><rect x="99.4107%" y="581" width="0.0331%" height="15" fill="rgb(244,185,38)" fg:x="45042" fg:w="15"/><text x="99.6607%" y="591.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.07%)</title><rect x="99.4571%" y="597" width="0.0684%" height="15" fill="rgb(236,202,9)" fg:x="45063" fg:w="31"/><text x="99.7071%" y="607.50"></text></g><g><title>argten-backend-rust`show_image::backend::proxy::WindowProxy::set_image (66 samples, 0.15%)</title><rect x="99.3820%" y="613" width="0.1457%" height="15" fill="rgb(250,229,37)" fg:x="45029" fg:w="66"/><text x="99.6320%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_free (17 samples, 0.04%)</title><rect x="99.5431%" y="613" width="0.0375%" height="15" fill="rgb(206,174,23)" fg:x="45102" fg:w="17"/><text x="99.7931%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 0.04%)</title><rect x="99.5807%" y="613" width="0.0375%" height="15" fill="rgb(211,33,43)" fg:x="45119" fg:w="17"/><text x="99.8307%" y="623.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::main::main (43,449 samples, 95.89%)</title><rect x="3.7344%" y="629" width="95.8949%" height="15" fill="rgb(245,58,50)" fg:x="1692" fg:w="43449"/><text x="3.9844%" y="639.50">argten-backend-rust`argten_backend_rust::main::main</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.01%)</title><rect x="99.6469%" y="629" width="0.0110%" height="15" fill="rgb(244,68,36)" fg:x="45149" fg:w="5"/><text x="99.8969%" y="639.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.01%)</title><rect x="99.6734%" y="629" width="0.0110%" height="15" fill="rgb(232,229,15)" fg:x="45161" fg:w="5"/><text x="99.9234%" y="639.50"></text></g><g><title>all (45,309 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="45309"/><text x="0.2500%" y="735.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (43,622 samples, 96.28%)</title><rect x="3.7233%" y="709" width="96.2767%" height="15" fill="rgb(235,160,14)" fg:x="1687" fg:w="43622"/><text x="3.9733%" y="719.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (43,622 samples, 96.28%)</title><rect x="3.7233%" y="693" width="96.2767%" height="15" fill="rgb(212,155,44)" fg:x="1687" fg:w="43622"/><text x="3.9733%" y="703.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>argten-backend-rust`std::sys::pal::unix::thread::Thread::new::thread_start (43,619 samples, 96.27%)</title><rect x="3.7299%" y="677" width="96.2701%" height="15" fill="rgb(226,2,50)" fg:x="1690" fg:w="43619"/><text x="3.9799%" y="687.50">argten-backend-rust`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}} (43,619 samples, 96.27%)</title><rect x="3.7299%" y="661" width="96.2701%" height="15" fill="rgb(234,177,6)" fg:x="1690" fg:w="43619"/><text x="3.9799%" y="671.50">argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace (43,619 samples, 96.27%)</title><rect x="3.7299%" y="645" width="96.2701%" height="15" fill="rgb(217,24,9)" fg:x="1690" fg:w="43619"/><text x="3.9799%" y="655.50">argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memset (143 samples, 0.32%)</title><rect x="99.6844%" y="629" width="0.3156%" height="15" fill="rgb(220,13,46)" fg:x="45166" fg:w="143"/><text x="99.9344%" y="639.50"></text></g></svg></svg>