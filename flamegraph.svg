<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="205883"><g><title>argten-backend-rust`show_image::backend::context::ContextHandle::create_window (21 samples, 0.01%)</title><rect x="0.0253%" y="293" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="52" fg:w="21"/><text x="0.2753%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::buffer_unmap (37 samples, 0.02%)</title><rect x="0.0379%" y="245" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="78" fg:w="37"/><text x="0.2879%" y="255.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::buffer_unmap (37 samples, 0.02%)</title><rect x="0.0379%" y="229" width="0.0180%" height="15" fill="rgb(221,193,54)" fg:x="78" fg:w="37"/><text x="0.2879%" y="239.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::buffer_unmap (37 samples, 0.02%)</title><rect x="0.0379%" y="213" width="0.0180%" height="15" fill="rgb(248,212,6)" fg:x="78" fg:w="37"/><text x="0.2879%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::buffer_unmap_inner (35 samples, 0.02%)</title><rect x="0.0389%" y="197" width="0.0170%" height="15" fill="rgb(208,68,35)" fg:x="80" fg:w="35"/><text x="0.2889%" y="207.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (104 samples, 0.05%)</title><rect x="0.0588%" y="85" width="0.0505%" height="15" fill="rgb(232,128,0)" fg:x="121" fg:w="104"/><text x="0.3088%" y="95.50"></text></g><g><title>IOKit`IOConnectCallMethod (104 samples, 0.05%)</title><rect x="0.0588%" y="69" width="0.0505%" height="15" fill="rgb(207,160,47)" fg:x="121" fg:w="104"/><text x="0.3088%" y="79.50"></text></g><g><title>IOKit`io_connect_method (103 samples, 0.05%)</title><rect x="0.0593%" y="53" width="0.0500%" height="15" fill="rgb(228,23,34)" fg:x="122" fg:w="103"/><text x="0.3093%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (103 samples, 0.05%)</title><rect x="0.0593%" y="37" width="0.0500%" height="15" fill="rgb(218,30,26)" fg:x="122" fg:w="103"/><text x="0.3093%" y="47.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithDevice:pointer:length:alignment:options:sysMemSize:gpuAddress:args:argsSize:deallocator:] (107 samples, 0.05%)</title><rect x="0.0583%" y="117" width="0.0520%" height="15" fill="rgb(220,122,19)" fg:x="120" fg:w="107"/><text x="0.3083%" y="127.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (107 samples, 0.05%)</title><rect x="0.0583%" y="101" width="0.0520%" height="15" fill="rgb(250,228,42)" fg:x="120" fg:w="107"/><text x="0.3083%" y="111.50"></text></g><g><title>IOKit`IOConnectCallMethod (59 samples, 0.03%)</title><rect x="0.1112%" y="69" width="0.0287%" height="15" fill="rgb(240,193,28)" fg:x="229" fg:w="59"/><text x="0.3612%" y="79.50"></text></g><g><title>IOKit`io_connect_method (59 samples, 0.03%)</title><rect x="0.1112%" y="53" width="0.0287%" height="15" fill="rgb(216,20,37)" fg:x="229" fg:w="59"/><text x="0.3612%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (57 samples, 0.03%)</title><rect x="0.1122%" y="37" width="0.0277%" height="15" fill="rgb(206,188,39)" fg:x="231" fg:w="57"/><text x="0.3622%" y="47.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (62 samples, 0.03%)</title><rect x="0.1103%" y="85" width="0.0301%" height="15" fill="rgb(217,207,13)" fg:x="227" fg:w="62"/><text x="0.3603%" y="95.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithPrimaryBuffer:heapIndex:bufferIndex:bufferOffset:length:args:argsSize:] (67 samples, 0.03%)</title><rect x="0.1103%" y="117" width="0.0325%" height="15" fill="rgb(231,73,38)" fg:x="227" fg:w="67"/><text x="0.3603%" y="127.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (67 samples, 0.03%)</title><rect x="0.1103%" y="101" width="0.0325%" height="15" fill="rgb(225,20,46)" fg:x="227" fg:w="67"/><text x="0.3603%" y="111.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (182 samples, 0.09%)</title><rect x="0.0583%" y="133" width="0.0884%" height="15" fill="rgb(210,31,41)" fg:x="120" fg:w="182"/><text x="0.3083%" y="143.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (187 samples, 0.09%)</title><rect x="0.0583%" y="149" width="0.0908%" height="15" fill="rgb(221,200,47)" fg:x="120" fg:w="187"/><text x="0.3083%" y="159.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::device_create_buffer (197 samples, 0.10%)</title><rect x="0.0563%" y="213" width="0.0957%" height="15" fill="rgb(226,26,5)" fg:x="116" fg:w="197"/><text x="0.3063%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::create_buffer (195 samples, 0.09%)</title><rect x="0.0573%" y="197" width="0.0947%" height="15" fill="rgb(249,33,26)" fg:x="118" fg:w="195"/><text x="0.3073%" y="207.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (195 samples, 0.09%)</title><rect x="0.0573%" y="181" width="0.0947%" height="15" fill="rgb(235,183,28)" fg:x="118" fg:w="195"/><text x="0.3073%" y="191.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (193 samples, 0.09%)</title><rect x="0.0583%" y="165" width="0.0937%" height="15" fill="rgb(221,5,38)" fg:x="120" fg:w="193"/><text x="0.3083%" y="175.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::device_create_buffer (561 samples, 0.27%)</title><rect x="0.0559%" y="245" width="0.2725%" height="15" fill="rgb(247,18,42)" fg:x="115" fg:w="561"/><text x="0.3059%" y="255.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_buffer (561 samples, 0.27%)</title><rect x="0.0559%" y="229" width="0.2725%" height="15" fill="rgb(241,131,45)" fg:x="115" fg:w="561"/><text x="0.3059%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (363 samples, 0.18%)</title><rect x="0.1520%" y="213" width="0.1763%" height="15" fill="rgb(249,31,29)" fg:x="313" fg:w="363"/><text x="0.4020%" y="223.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (602 samples, 0.29%)</title><rect x="0.0369%" y="261" width="0.2924%" height="15" fill="rgb(225,111,53)" fg:x="76" fg:w="602"/><text x="0.2869%" y="271.50"></text></g><g><title>argten-backend-rust`show_image::backend::window::WindowHandle::set_image (685 samples, 0.33%)</title><rect x="0.0355%" y="293" width="0.3327%" height="15" fill="rgb(238,160,17)" fg:x="73" fg:w="685"/><text x="0.2855%" y="303.50"></text></g><g><title>argten-backend-rust`show_image::backend::util::gpu_image::GpuImage::from_data (682 samples, 0.33%)</title><rect x="0.0369%" y="277" width="0.3313%" height="15" fill="rgb(214,148,48)" fg:x="76" fg:w="682"/><text x="0.2869%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (64 samples, 0.03%)</title><rect x="0.3371%" y="261" width="0.0311%" height="15" fill="rgb(232,36,49)" fg:x="694" fg:w="64"/><text x="0.5871%" y="271.50"></text></g><g><title>argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}} (719 samples, 0.35%)</title><rect x="0.0248%" y="309" width="0.3492%" height="15" fill="rgb(209,103,24)" fg:x="51" fg:w="719"/><text x="0.2748%" y="319.50"></text></g><g><title>argten-backend-rust`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_user_events (720 samples, 0.35%)</title><rect x="0.0248%" y="357" width="0.3497%" height="15" fill="rgb(229,88,8)" fg:x="51" fg:w="720"/><text x="0.2748%" y="367.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run::_{{closure}} (720 samples, 0.35%)</title><rect x="0.0248%" y="341" width="0.3497%" height="15" fill="rgb(213,181,19)" fg:x="51" fg:w="720"/><text x="0.2748%" y="351.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::handle_event (720 samples, 0.35%)</title><rect x="0.0248%" y="325" width="0.3497%" height="15" fill="rgb(254,191,54)" fg:x="51" fg:w="720"/><text x="0.2748%" y="335.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (21 samples, 0.01%)</title><rect x="0.3920%" y="149" width="0.0102%" height="15" fill="rgb(241,83,37)" fg:x="807" fg:w="21"/><text x="0.6420%" y="159.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (26 samples, 0.01%)</title><rect x="0.3920%" y="165" width="0.0126%" height="15" fill="rgb(233,36,39)" fg:x="807" fg:w="26"/><text x="0.6420%" y="175.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::render::RenderPassInfo&lt;A&gt;::start (35 samples, 0.02%)</title><rect x="0.3900%" y="213" width="0.0170%" height="15" fill="rgb(226,3,54)" fg:x="803" fg:w="35"/><text x="0.6400%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_render_pass (32 samples, 0.02%)</title><rect x="0.3915%" y="197" width="0.0155%" height="15" fill="rgb(245,192,40)" fg:x="806" fg:w="32"/><text x="0.6415%" y="207.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (31 samples, 0.02%)</title><rect x="0.3920%" y="181" width="0.0151%" height="15" fill="rgb(238,167,29)" fg:x="807" fg:w="31"/><text x="0.6420%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu_core::command::render::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (64 samples, 0.03%)</title><rect x="0.3808%" y="229" width="0.0311%" height="15" fill="rgb(232,182,51)" fg:x="784" fg:w="64"/><text x="0.6308%" y="239.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::command_encoder_end_render_pass (70 samples, 0.03%)</title><rect x="0.3784%" y="261" width="0.0340%" height="15" fill="rgb(231,60,39)" fg:x="779" fg:w="70"/><text x="0.6284%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_end_render_pass (69 samples, 0.03%)</title><rect x="0.3789%" y="245" width="0.0335%" height="15" fill="rgb(208,69,12)" fg:x="780" fg:w="69"/><text x="0.6289%" y="255.50"></text></g><g><title>argten-backend-rust`core::ptr::drop_in_place&lt;wgpu::RenderPass&gt; (71 samples, 0.03%)</title><rect x="0.3784%" y="277" width="0.0345%" height="15" fill="rgb(235,93,37)" fg:x="779" fg:w="71"/><text x="0.6284%" y="287.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::render_pass (74 samples, 0.04%)</title><rect x="0.3779%" y="293" width="0.0359%" height="15" fill="rgb(213,116,39)" fg:x="778" fg:w="74"/><text x="0.6279%" y="303.50"></text></g><g><title>IOKit`io_connect_method (41 samples, 0.02%)</title><rect x="0.4187%" y="69" width="0.0199%" height="15" fill="rgb(222,207,29)" fg:x="862" fg:w="41"/><text x="0.6687%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (40 samples, 0.02%)</title><rect x="0.4192%" y="53" width="0.0194%" height="15" fill="rgb(206,96,30)" fg:x="863" fg:w="40"/><text x="0.6692%" y="63.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (42 samples, 0.02%)</title><rect x="0.4187%" y="101" width="0.0204%" height="15" fill="rgb(218,138,4)" fg:x="862" fg:w="42"/><text x="0.6687%" y="111.50"></text></g><g><title>IOKit`IOConnectCallMethod (42 samples, 0.02%)</title><rect x="0.4187%" y="85" width="0.0204%" height="15" fill="rgb(250,191,14)" fg:x="862" fg:w="42"/><text x="0.6687%" y="95.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithPrimaryBuffer:heapIndex:bufferIndex:bufferOffset:length:args:argsSize:] (45 samples, 0.02%)</title><rect x="0.4177%" y="133" width="0.0219%" height="15" fill="rgb(239,60,40)" fg:x="860" fg:w="45"/><text x="0.6677%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (45 samples, 0.02%)</title><rect x="0.4177%" y="117" width="0.0219%" height="15" fill="rgb(206,27,48)" fg:x="860" fg:w="45"/><text x="0.6677%" y="127.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (48 samples, 0.02%)</title><rect x="0.4177%" y="165" width="0.0233%" height="15" fill="rgb(225,35,8)" fg:x="860" fg:w="48"/><text x="0.6677%" y="175.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (48 samples, 0.02%)</title><rect x="0.4177%" y="149" width="0.0233%" height="15" fill="rgb(250,213,24)" fg:x="860" fg:w="48"/><text x="0.6677%" y="159.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::global::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::device_create_buffer (51 samples, 0.02%)</title><rect x="0.4172%" y="229" width="0.0248%" height="15" fill="rgb(247,123,22)" fg:x="859" fg:w="51"/><text x="0.6672%" y="239.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::create_buffer (50 samples, 0.02%)</title><rect x="0.4177%" y="213" width="0.0243%" height="15" fill="rgb(231,138,38)" fg:x="860" fg:w="50"/><text x="0.6677%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (50 samples, 0.02%)</title><rect x="0.4177%" y="197" width="0.0243%" height="15" fill="rgb(231,145,46)" fg:x="860" fg:w="50"/><text x="0.6677%" y="207.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (50 samples, 0.02%)</title><rect x="0.4177%" y="181" width="0.0243%" height="15" fill="rgb(251,118,11)" fg:x="860" fg:w="50"/><text x="0.6677%" y="191.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::device_create_buffer (53 samples, 0.03%)</title><rect x="0.4167%" y="261" width="0.0257%" height="15" fill="rgb(217,147,25)" fg:x="858" fg:w="53"/><text x="0.6667%" y="271.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_buffer (53 samples, 0.03%)</title><rect x="0.4167%" y="245" width="0.0257%" height="15" fill="rgb(247,81,37)" fg:x="858" fg:w="53"/><text x="0.6667%" y="255.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (59 samples, 0.03%)</title><rect x="0.4143%" y="277" width="0.0287%" height="15" fill="rgb(209,12,38)" fg:x="853" fg:w="59"/><text x="0.6643%" y="287.50"></text></g><g><title>argten-backend-rust`show_image::backend::util::uniforms_buffer::UniformsBuffer&lt;T&gt;::update_from (80 samples, 0.04%)</title><rect x="0.4143%" y="293" width="0.0389%" height="15" fill="rgb(227,1,9)" fg:x="853" fg:w="80"/><text x="0.6643%" y="303.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyCommandBuffer commit] (27 samples, 0.01%)</title><rect x="0.4609%" y="213" width="0.0131%" height="15" fill="rgb(248,47,43)" fg:x="949" fg:w="27"/><text x="0.7109%" y="223.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (28 samples, 0.01%)</title><rect x="0.4609%" y="229" width="0.0136%" height="15" fill="rgb(221,10,30)" fg:x="949" fg:w="28"/><text x="0.7109%" y="239.50"></text></g><g><title>argten-backend-rust`&lt;wgpu_hal::metal::Queue as wgpu_hal::Queue&lt;wgpu_hal::metal::Api&gt;&gt;::submit (30 samples, 0.01%)</title><rect x="0.4605%" y="245" width="0.0146%" height="15" fill="rgb(210,229,1)" fg:x="948" fg:w="30"/><text x="0.7105%" y="255.50"></text></g><g><title>IOKit`iokit_user_client_trap (110 samples, 0.05%)</title><rect x="0.4862%" y="133" width="0.0534%" height="15" fill="rgb(222,148,37)" fg:x="1001" fg:w="110"/><text x="0.7362%" y="143.50"></text></g><g><title>CoreFoundation`_CFRelease (115 samples, 0.06%)</title><rect x="0.4847%" y="149" width="0.0559%" height="15" fill="rgb(234,67,33)" fg:x="998" fg:w="115"/><text x="0.7347%" y="159.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource dealloc] (119 samples, 0.06%)</title><rect x="0.4847%" y="165" width="0.0578%" height="15" fill="rgb(247,98,35)" fg:x="998" fg:w="119"/><text x="0.7347%" y="175.50"></text></g><g><title>AGXMetalG13X`-[AGXBuffer dealloc] (122 samples, 0.06%)</title><rect x="0.4843%" y="197" width="0.0593%" height="15" fill="rgb(247,138,52)" fg:x="997" fg:w="122"/><text x="0.7343%" y="207.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer dealloc] (122 samples, 0.06%)</title><rect x="0.4843%" y="181" width="0.0593%" height="15" fill="rgb(213,79,30)" fg:x="997" fg:w="122"/><text x="0.7343%" y="191.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::life::NonReferencedResources&lt;A&gt;::clean (123 samples, 0.06%)</title><rect x="0.4843%" y="229" width="0.0597%" height="15" fill="rgb(246,177,23)" fg:x="997" fg:w="123"/><text x="0.7343%" y="239.50"></text></g><g><title>AGXMetalG13X`-[AGXG13XFamilyBuffer dealloc] (123 samples, 0.06%)</title><rect x="0.4843%" y="213" width="0.0597%" height="15" fill="rgb(230,62,27)" fg:x="997" fg:w="123"/><text x="0.7343%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::resource::Device&lt;A&gt;::maintain (142 samples, 0.07%)</title><rect x="0.4765%" y="245" width="0.0690%" height="15" fill="rgb(216,154,8)" fg:x="981" fg:w="142"/><text x="0.7265%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu::Queue::submit (193 samples, 0.09%)</title><rect x="0.4556%" y="293" width="0.0937%" height="15" fill="rgb(244,35,45)" fg:x="938" fg:w="193"/><text x="0.7056%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::queue_submit (192 samples, 0.09%)</title><rect x="0.4561%" y="277" width="0.0933%" height="15" fill="rgb(251,115,12)" fg:x="939" fg:w="192"/><text x="0.7061%" y="287.50"></text></g><g><title>argten-backend-rust`wgpu_core::device::queue::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::queue_submit (187 samples, 0.09%)</title><rect x="0.4585%" y="261" width="0.0908%" height="15" fill="rgb(240,54,50)" fg:x="944" fg:w="187"/><text x="0.7085%" y="271.50"></text></g><g><title>argten-backend-rust`objc::rc::autorelease::autoreleasepool (21 samples, 0.01%)</title><rect x="0.5508%" y="213" width="0.0102%" height="15" fill="rgb(233,84,52)" fg:x="1134" fg:w="21"/><text x="0.8008%" y="223.50"></text></g><g><title>argten-backend-rust`wgpu::Surface::get_current_texture (27 samples, 0.01%)</title><rect x="0.5493%" y="293" width="0.0131%" height="15" fill="rgb(207,117,47)" fg:x="1131" fg:w="27"/><text x="0.7993%" y="303.50"></text></g><g><title>argten-backend-rust`&lt;T as wgpu::context::DynContext&gt;::surface_get_current_texture (27 samples, 0.01%)</title><rect x="0.5493%" y="277" width="0.0131%" height="15" fill="rgb(249,43,39)" fg:x="1131" fg:w="27"/><text x="0.7993%" y="287.50"></text></g><g><title>argten-backend-rust`&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_get_current_texture (27 samples, 0.01%)</title><rect x="0.5493%" y="261" width="0.0131%" height="15" fill="rgb(209,38,44)" fg:x="1131" fg:w="27"/><text x="0.7993%" y="271.50"></text></g><g><title>argten-backend-rust`wgpu_core::present::_&lt;impl wgpu_core::global::Global&lt;G&gt;&gt;::surface_get_current_texture (26 samples, 0.01%)</title><rect x="0.5498%" y="245" width="0.0126%" height="15" fill="rgb(236,212,23)" fg:x="1132" fg:w="26"/><text x="0.7998%" y="255.50"></text></g><g><title>argten-backend-rust`wgpu_hal::metal::surface::_&lt;impl wgpu_hal::Surface&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Surface&gt;::acquire_texture (24 samples, 0.01%)</title><rect x="0.5508%" y="229" width="0.0117%" height="15" fill="rgb(242,79,21)" fg:x="1134" fg:w="24"/><text x="0.8008%" y="239.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::handle_event (402 samples, 0.20%)</title><rect x="0.3759%" y="309" width="0.1953%" height="15" fill="rgb(211,96,35)" fg:x="774" fg:w="402"/><text x="0.6259%" y="319.50"></text></g><g><title>argten-backend-rust`std::panicking::try (1,131 samples, 0.55%)</title><rect x="0.0228%" y="389" width="0.5493%" height="15" fill="rgb(253,215,40)" fg:x="47" fg:w="1131"/><text x="0.2728%" y="399.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app_state::AppState::cleared (1,130 samples, 0.55%)</title><rect x="0.0233%" y="373" width="0.5489%" height="15" fill="rgb(211,81,21)" fg:x="48" fg:w="1130"/><text x="0.2733%" y="383.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (405 samples, 0.20%)</title><rect x="0.3755%" y="357" width="0.1967%" height="15" fill="rgb(208,190,38)" fg:x="773" fg:w="405"/><text x="0.6255%" y="367.50"></text></g><g><title>argten-backend-rust`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event (405 samples, 0.20%)</title><rect x="0.3755%" y="341" width="0.1967%" height="15" fill="rgb(235,213,38)" fg:x="773" fg:w="405"/><text x="0.6255%" y="351.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run::_{{closure}} (405 samples, 0.20%)</title><rect x="0.3755%" y="325" width="0.1967%" height="15" fill="rgb(237,122,38)" fg:x="773" fg:w="405"/><text x="0.6255%" y="335.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (1,156 samples, 0.56%)</title><rect x="0.0117%" y="421" width="0.5615%" height="15" fill="rgb(244,218,35)" fg:x="24" fg:w="1156"/><text x="0.2617%" y="431.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::observer::control_flow_end_handler (1,134 samples, 0.55%)</title><rect x="0.0223%" y="405" width="0.5508%" height="15" fill="rgb(240,68,47)" fg:x="46" fg:w="1134"/><text x="0.2723%" y="415.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (1,161 samples, 0.56%)</title><rect x="0.0107%" y="437" width="0.5639%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1161"/><text x="0.2607%" y="447.50"></text></g><g><title>CoreFoundation`__CFRunLoopServiceMachPort (32 samples, 0.02%)</title><rect x="0.5770%" y="437" width="0.0155%" height="15" fill="rgb(235,124,12)" fg:x="1188" fg:w="32"/><text x="0.8270%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (32 samples, 0.02%)</title><rect x="0.5770%" y="421" width="0.0155%" height="15" fill="rgb(224,169,11)" fg:x="1188" fg:w="32"/><text x="0.8270%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (31 samples, 0.02%)</title><rect x="0.5775%" y="405" width="0.0151%" height="15" fill="rgb(250,166,2)" fg:x="1189" fg:w="31"/><text x="0.8275%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (30 samples, 0.01%)</title><rect x="0.5780%" y="389" width="0.0146%" height="15" fill="rgb(242,216,29)" fg:x="1190" fg:w="30"/><text x="0.8280%" y="399.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (1,212 samples, 0.59%)</title><rect x="0.0073%" y="453" width="0.5887%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="1212"/><text x="0.2573%" y="463.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (1,217 samples, 0.59%)</title><rect x="0.0053%" y="469" width="0.5911%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1217"/><text x="0.2553%" y="479.50"></text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (1,219 samples, 0.59%)</title><rect x="0.0053%" y="517" width="0.5921%" height="15" fill="rgb(253,11,6)" fg:x="11" fg:w="1219"/><text x="0.2553%" y="527.50"></text></g><g><title>HIToolbox`ReceiveNextEventCommon (1,219 samples, 0.59%)</title><rect x="0.0053%" y="501" width="0.5921%" height="15" fill="rgb(247,143,39)" fg:x="11" fg:w="1219"/><text x="0.2553%" y="511.50"></text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (1,219 samples, 0.59%)</title><rect x="0.0053%" y="485" width="0.5921%" height="15" fill="rgb(236,97,10)" fg:x="11" fg:w="1219"/><text x="0.2553%" y="495.50"></text></g><g><title>AppKit`_DPSNextEvent (1,224 samples, 0.59%)</title><rect x="0.0034%" y="533" width="0.5945%" height="15" fill="rgb(233,208,19)" fg:x="7" fg:w="1224"/><text x="0.2534%" y="543.50"></text></g><g><title>AppKit`-[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (1,225 samples, 0.59%)</title><rect x="0.0034%" y="549" width="0.5950%" height="15" fill="rgb(216,164,2)" fg:x="7" fg:w="1225"/><text x="0.2534%" y="559.50"></text></g><g><title>argten-backend-rust`show_image::backend::context::Context::run (1,232 samples, 0.60%)</title><rect x="0.0005%" y="597" width="0.5984%" height="15" fill="rgb(220,129,5)" fg:x="1" fg:w="1232"/><text x="0.2505%" y="607.50"></text></g><g><title>argten-backend-rust`winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::run (1,232 samples, 0.60%)</title><rect x="0.0005%" y="581" width="0.5984%" height="15" fill="rgb(242,17,10)" fg:x="1" fg:w="1232"/><text x="0.2505%" y="591.50"></text></g><g><title>AppKit`-[NSApplication run] (1,232 samples, 0.60%)</title><rect x="0.0005%" y="565" width="0.5984%" height="15" fill="rgb(242,107,0)" fg:x="1" fg:w="1232"/><text x="0.2505%" y="575.50"></text></g><g><title>dyld`start (1,243 samples, 0.60%)</title><rect x="0.0000%" y="709" width="0.6037%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="719.50"></text></g><g><title>argten-backend-rust`main (1,243 samples, 0.60%)</title><rect x="0.0000%" y="693" width="0.6037%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="703.50"></text></g><g><title>argten-backend-rust`std::rt::lang_start_internal (1,242 samples, 0.60%)</title><rect x="0.0005%" y="677" width="0.6033%" height="15" fill="rgb(215,21,27)" fg:x="1" fg:w="1242"/><text x="0.2505%" y="687.50"></text></g><g><title>argten-backend-rust`std::rt::lang_start::_{{closure}} (1,242 samples, 0.60%)</title><rect x="0.0005%" y="661" width="0.6033%" height="15" fill="rgb(232,23,21)" fg:x="1" fg:w="1242"/><text x="0.2505%" y="671.50"></text></g><g><title>argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace (1,242 samples, 0.60%)</title><rect x="0.0005%" y="645" width="0.6033%" height="15" fill="rgb(244,5,23)" fg:x="1" fg:w="1242"/><text x="0.2505%" y="655.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::main::main (1,242 samples, 0.60%)</title><rect x="0.0005%" y="629" width="0.6033%" height="15" fill="rgb(226,81,46)" fg:x="1" fg:w="1242"/><text x="0.2505%" y="639.50"></text></g><g><title>argten-backend-rust`show_image::backend::run_context (1,242 samples, 0.60%)</title><rect x="0.0005%" y="613" width="0.6033%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="1242"/><text x="0.2505%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (304 samples, 0.15%)</title><rect x="0.6159%" y="693" width="0.1477%" height="15" fill="rgb(212,68,19)" fg:x="1268" fg:w="304"/><text x="0.8659%" y="703.50"></text></g><g><title>QuartzCore`CAImageQueuePing_ (21 samples, 0.01%)</title><rect x="0.7869%" y="389" width="0.0102%" height="15" fill="rgb(240,187,13)" fg:x="1620" fg:w="21"/><text x="1.0369%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (21 samples, 0.01%)</title><rect x="0.7869%" y="373" width="0.0102%" height="15" fill="rgb(223,113,26)" fg:x="1620" fg:w="21"/><text x="1.0369%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (21 samples, 0.01%)</title><rect x="0.7869%" y="357" width="0.0102%" height="15" fill="rgb(206,192,2)" fg:x="1620" fg:w="21"/><text x="1.0369%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (21 samples, 0.01%)</title><rect x="0.7869%" y="341" width="0.0102%" height="15" fill="rgb(241,108,4)" fg:x="1620" fg:w="21"/><text x="1.0369%" y="351.50"></text></g><g><title>QuartzCore`CAImageQueueInsertImage_ (27 samples, 0.01%)</title><rect x="0.7864%" y="405" width="0.0131%" height="15" fill="rgb(247,173,49)" fg:x="1619" fg:w="27"/><text x="1.0364%" y="415.50"></text></g><g><title>QuartzCore`layer_private_present_impl(_CAMetalLayerPrivate*, CAMetalDrawable*, double, unsigned int) (29 samples, 0.01%)</title><rect x="0.7864%" y="421" width="0.0141%" height="15" fill="rgb(224,114,35)" fg:x="1619" fg:w="29"/><text x="1.0364%" y="431.50"></text></g><g><title>QuartzCore`-[CAMetalDrawable present] (31 samples, 0.02%)</title><rect x="0.7864%" y="437" width="0.0151%" height="15" fill="rgb(245,159,27)" fg:x="1619" fg:w="31"/><text x="1.0364%" y="447.50"></text></g><g><title>Metal`__45-[_MTLCommandBuffer presentDrawable:options:]_block_invoke (35 samples, 0.02%)</title><rect x="0.7859%" y="453" width="0.0170%" height="15" fill="rgb(245,172,44)" fg:x="1618" fg:w="35"/><text x="1.0359%" y="463.50"></text></g><g><title>Metal`MTLDispatchListApply (42 samples, 0.02%)</title><rect x="0.7859%" y="469" width="0.0204%" height="15" fill="rgb(236,23,11)" fg:x="1618" fg:w="42"/><text x="1.0359%" y="479.50"></text></g><g><title>Metal`-[_MTLCommandBuffer didScheduleWithStartTime:endTime:error:] (44 samples, 0.02%)</title><rect x="0.7859%" y="485" width="0.0214%" height="15" fill="rgb(205,117,38)" fg:x="1618" fg:w="44"/><text x="1.0359%" y="495.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer didCompleteWithStartTime:endTime:error:] (22 samples, 0.01%)</title><rect x="0.8097%" y="469" width="0.0107%" height="15" fill="rgb(237,72,25)" fg:x="1667" fg:w="22"/><text x="1.0597%" y="479.50"></text></g><g><title>Metal`-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (30 samples, 0.01%)</title><rect x="0.8073%" y="485" width="0.0146%" height="15" fill="rgb(244,70,9)" fg:x="1662" fg:w="30"/><text x="1.0573%" y="495.50"></text></g><g><title>libsystem_blocks.dylib`_Block_release (21 samples, 0.01%)</title><rect x="0.8223%" y="485" width="0.0102%" height="15" fill="rgb(217,125,39)" fg:x="1693" fg:w="21"/><text x="1.0723%" y="495.50"></text></g><g><title>IOGPU`IOGPUNotificationQueueDispatchAvailableCompletionNotifications (101 samples, 0.05%)</title><rect x="0.7849%" y="501" width="0.0491%" height="15" fill="rgb(235,36,10)" fg:x="1616" fg:w="101"/><text x="1.0349%" y="511.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout4 (106 samples, 0.05%)</title><rect x="0.7849%" y="533" width="0.0515%" height="15" fill="rgb(251,123,47)" fg:x="1616" fg:w="106"/><text x="1.0349%" y="543.50"></text></g><g><title>IOGPU`__IOGPUNotificationQueueSetDispatchQueue_block_invoke (106 samples, 0.05%)</title><rect x="0.7849%" y="517" width="0.0515%" height="15" fill="rgb(221,13,13)" fg:x="1616" fg:w="106"/><text x="1.0349%" y="527.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (110 samples, 0.05%)</title><rect x="0.7839%" y="613" width="0.0534%" height="15" fill="rgb(238,131,9)" fg:x="1614" fg:w="110"/><text x="1.0339%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (109 samples, 0.05%)</title><rect x="0.7844%" y="597" width="0.0529%" height="15" fill="rgb(211,50,8)" fg:x="1615" fg:w="109"/><text x="1.0344%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_invoke (109 samples, 0.05%)</title><rect x="0.7844%" y="581" width="0.0529%" height="15" fill="rgb(245,182,24)" fg:x="1615" fg:w="109"/><text x="1.0344%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (108 samples, 0.05%)</title><rect x="0.7849%" y="565" width="0.0525%" height="15" fill="rgb(242,14,37)" fg:x="1616" fg:w="108"/><text x="1.0349%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_invoke (108 samples, 0.05%)</title><rect x="0.7849%" y="549" width="0.0525%" height="15" fill="rgb(246,228,12)" fg:x="1616" fg:w="108"/><text x="1.0349%" y="559.50"></text></g><g><title>IOKit`io_connect_method (555 samples, 0.27%)</title><rect x="0.8432%" y="469" width="0.2696%" height="15" fill="rgb(213,55,15)" fg:x="1736" fg:w="555"/><text x="1.0932%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (555 samples, 0.27%)</title><rect x="0.8432%" y="453" width="0.2696%" height="15" fill="rgb(209,9,3)" fg:x="1736" fg:w="555"/><text x="1.0932%" y="463.50"></text></g><g><title>IOGPU`IOGPUCommandQueueSubmitCommandBuffers (557 samples, 0.27%)</title><rect x="0.8427%" y="501" width="0.2705%" height="15" fill="rgb(230,59,30)" fg:x="1735" fg:w="557"/><text x="1.0927%" y="511.50"></text></g><g><title>IOKit`IOConnectCallMethod (556 samples, 0.27%)</title><rect x="0.8432%" y="485" width="0.2701%" height="15" fill="rgb(209,121,21)" fg:x="1736" fg:w="556"/><text x="1.0932%" y="495.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (568 samples, 0.28%)</title><rect x="0.8417%" y="517" width="0.2759%" height="15" fill="rgb(220,109,13)" fg:x="1733" fg:w="568"/><text x="1.0917%" y="527.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (570 samples, 0.28%)</title><rect x="0.8417%" y="533" width="0.2769%" height="15" fill="rgb(232,18,1)" fg:x="1733" fg:w="570"/><text x="1.0917%" y="543.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (576 samples, 0.28%)</title><rect x="0.8393%" y="549" width="0.2798%" height="15" fill="rgb(215,41,42)" fg:x="1728" fg:w="576"/><text x="1.0893%" y="559.50"></text></g><g><title>QuartzCore`CARenderServerProcessClientMessage (32 samples, 0.02%)</title><rect x="1.1191%" y="549" width="0.0155%" height="15" fill="rgb(224,123,36)" fg:x="2304" fg:w="32"/><text x="1.3691%" y="559.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (740 samples, 0.36%)</title><rect x="0.7771%" y="629" width="0.3594%" height="15" fill="rgb(240,125,3)" fg:x="1600" fg:w="740"/><text x="1.0271%" y="639.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (615 samples, 0.30%)</title><rect x="0.8379%" y="613" width="0.2987%" height="15" fill="rgb(205,98,50)" fg:x="1725" fg:w="615"/><text x="1.0879%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_latch_and_call (613 samples, 0.30%)</title><rect x="0.8388%" y="597" width="0.2977%" height="15" fill="rgb(205,185,37)" fg:x="1727" fg:w="613"/><text x="1.0888%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_continuation_pop (613 samples, 0.30%)</title><rect x="0.8388%" y="581" width="0.2977%" height="15" fill="rgb(238,207,15)" fg:x="1727" fg:w="613"/><text x="1.0888%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (613 samples, 0.30%)</title><rect x="0.8388%" y="565" width="0.2977%" height="15" fill="rgb(213,199,42)" fg:x="1727" fg:w="613"/><text x="1.0888%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (742 samples, 0.36%)</title><rect x="0.7771%" y="645" width="0.3604%" height="15" fill="rgb(235,201,11)" fg:x="1600" fg:w="742"/><text x="1.0271%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain_deferred_wlh (747 samples, 0.36%)</title><rect x="0.7757%" y="661" width="0.3628%" height="15" fill="rgb(207,46,11)" fg:x="1597" fg:w="747"/><text x="1.0257%" y="671.50"></text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (766 samples, 0.37%)</title><rect x="0.7674%" y="677" width="0.3721%" height="15" fill="rgb(241,35,35)" fg:x="1580" fg:w="766"/><text x="1.0174%" y="687.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (1,101 samples, 0.53%)</title><rect x="0.6052%" y="709" width="0.5348%" height="15" fill="rgb(243,32,47)" fg:x="1246" fg:w="1101"/><text x="0.8552%" y="719.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (775 samples, 0.38%)</title><rect x="0.7635%" y="693" width="0.3764%" height="15" fill="rgb(247,202,23)" fg:x="1572" fg:w="775"/><text x="1.0135%" y="703.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (213 samples, 0.10%)</title><rect x="8.9541%" y="597" width="0.1035%" height="15" fill="rgb(219,102,11)" fg:x="18435" fg:w="213"/><text x="9.2041%" y="607.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::point::Point::mutate (31 samples, 0.02%)</title><rect x="9.0624%" y="597" width="0.0151%" height="15" fill="rgb(243,110,44)" fg:x="18658" fg:w="31"/><text x="9.3124%" y="607.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1,027 samples, 0.50%)</title><rect x="9.1314%" y="565" width="0.4988%" height="15" fill="rgb(222,74,54)" fg:x="18800" fg:w="1027"/><text x="9.3814%" y="575.50"></text></g><g><title>argten-backend-rust`rand::rngs::thread::thread_rng (50 samples, 0.02%)</title><rect x="9.6914%" y="549" width="0.0243%" height="15" fill="rgb(216,99,12)" fg:x="19953" fg:w="50"/><text x="9.9414%" y="559.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (391 samples, 0.19%)</title><rect x="9.6302%" y="565" width="0.1899%" height="15" fill="rgb(226,22,26)" fg:x="19827" fg:w="391"/><text x="9.8802%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (215 samples, 0.10%)</title><rect x="9.7157%" y="549" width="0.1044%" height="15" fill="rgb(217,163,10)" fg:x="20003" fg:w="215"/><text x="9.9657%" y="559.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::color::Color::mutate (1,467 samples, 0.71%)</title><rect x="9.1081%" y="581" width="0.7125%" height="15" fill="rgb(213,25,53)" fg:x="18752" fg:w="1467"/><text x="9.3581%" y="591.50"></text></g><g><title>argten-backend-rust`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (629 samples, 0.31%)</title><rect x="9.8333%" y="565" width="0.3055%" height="15" fill="rgb(252,105,26)" fg:x="20245" fg:w="629"/><text x="10.0833%" y="575.50"></text></g><g><title>argten-backend-rust`rand::rngs::thread::thread_rng (31 samples, 0.02%)</title><rect x="10.1825%" y="549" width="0.0151%" height="15" fill="rgb(220,39,43)" fg:x="20964" fg:w="31"/><text x="10.4325%" y="559.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (253 samples, 0.12%)</title><rect x="10.1388%" y="565" width="0.1229%" height="15" fill="rgb(229,68,48)" fg:x="20874" fg:w="253"/><text x="10.3888%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (132 samples, 0.06%)</title><rect x="10.1975%" y="549" width="0.0641%" height="15" fill="rgb(252,8,32)" fg:x="20995" fg:w="132"/><text x="10.4475%" y="559.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::point::Point::mutate (918 samples, 0.45%)</title><rect x="9.8206%" y="581" width="0.4459%" height="15" fill="rgb(223,20,43)" fg:x="20219" fg:w="918"/><text x="10.0706%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::randomf64 (80 samples, 0.04%)</title><rect x="10.2665%" y="581" width="0.0389%" height="15" fill="rgb(229,81,49)" fg:x="21137" fg:w="80"/><text x="10.5165%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::polygon::Polygon::mutate (2,584 samples, 1.26%)</title><rect x="9.0775%" y="597" width="1.2551%" height="15" fill="rgb(236,28,36)" fg:x="18689" fg:w="2584"/><text x="9.3275%" y="607.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (40 samples, 0.02%)</title><rect x="10.3131%" y="581" width="0.0194%" height="15" fill="rgb(249,185,26)" fg:x="21233" fg:w="40"/><text x="10.5631%" y="591.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::models::drawing::Drawing::mutate (2,841 samples, 1.38%)</title><rect x="8.9536%" y="613" width="1.3799%" height="15" fill="rgb(249,174,33)" fg:x="18434" fg:w="2841"/><text x="9.2036%" y="623.50"></text></g><g><title>argten-backend-rust`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49 samples, 0.02%)</title><rect x="99.4584%" y="597" width="0.0238%" height="15" fill="rgb(233,201,37)" fg:x="204768" fg:w="49"/><text x="99.7084%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.01%)</title><rect x="99.4890%" y="597" width="0.0117%" height="15" fill="rgb(221,78,26)" fg:x="204831" fg:w="24"/><text x="99.7390%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (59 samples, 0.03%)</title><rect x="99.5007%" y="597" width="0.0287%" height="15" fill="rgb(250,127,30)" fg:x="204855" fg:w="59"/><text x="99.7507%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (43 samples, 0.02%)</title><rect x="99.5293%" y="597" width="0.0209%" height="15" fill="rgb(230,49,44)" fg:x="204914" fg:w="43"/><text x="99.7793%" y="607.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::utils::fill_triangle (183,688 samples, 89.22%)</title><rect x="10.3423%" y="613" width="89.2196%" height="15" fill="rgb(229,67,23)" fg:x="21293" fg:w="183688"/><text x="10.5923%" y="623.50">argten-backend-rust`argten_backend_rust::utils::fill_triangle</text></g><g><title>argten-backend-rust`image::dynimage::decoder_to_image (23 samples, 0.01%)</title><rect x="99.5716%" y="613" width="0.0112%" height="15" fill="rgb(249,83,47)" fg:x="205001" fg:w="23"/><text x="99.8216%" y="623.50"></text></g><g><title>argten-backend-rust`image::image::decoder_to_vec (23 samples, 0.01%)</title><rect x="99.5716%" y="597" width="0.0112%" height="15" fill="rgb(215,43,3)" fg:x="205001" fg:w="23"/><text x="99.8216%" y="607.50"></text></g><g><title>argten-backend-rust`&lt;image::codecs::jpeg::decoder::JpegDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (23 samples, 0.01%)</title><rect x="99.5716%" y="581" width="0.0112%" height="15" fill="rgb(238,154,13)" fg:x="205001" fg:w="23"/><text x="99.8216%" y="591.50"></text></g><g><title>argten-backend-rust`zune_jpeg::mcu_prog::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::decode_mcu_ycbcr_progressive (23 samples, 0.01%)</title><rect x="99.5716%" y="565" width="0.0112%" height="15" fill="rgb(219,56,2)" fg:x="205001" fg:w="23"/><text x="99.8216%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.02%)</title><rect x="99.5925%" y="597" width="0.0194%" height="15" fill="rgb(233,0,4)" fg:x="205044" fg:w="40"/><text x="99.8425%" y="607.50"></text></g><g><title>argten-backend-rust`show_image::backend::proxy::WindowProxy::set_image (61 samples, 0.03%)</title><rect x="99.5828%" y="613" width="0.0296%" height="15" fill="rgb(235,30,7)" fg:x="205024" fg:w="61"/><text x="99.8328%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_free (37 samples, 0.02%)</title><rect x="99.6260%" y="613" width="0.0180%" height="15" fill="rgb(250,79,13)" fg:x="205113" fg:w="37"/><text x="99.8760%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (82 samples, 0.04%)</title><rect x="99.6440%" y="613" width="0.0398%" height="15" fill="rgb(211,146,34)" fg:x="205150" fg:w="82"/><text x="99.8940%" y="623.50"></text></g><g><title>argten-backend-rust`argten_backend_rust::main::main (202,897 samples, 98.55%)</title><rect x="1.1497%" y="629" width="98.5497%" height="15" fill="rgb(228,22,38)" fg:x="2367" fg:w="202897"/><text x="1.3997%" y="639.50">argten-backend-rust`argten_backend_rust::main::main</text></g><g><title>libsystem_platform.dylib`_platform_memset (22 samples, 0.01%)</title><rect x="99.6887%" y="613" width="0.0107%" height="15" fill="rgb(235,168,5)" fg:x="205242" fg:w="22"/><text x="99.9387%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_free (41 samples, 0.02%)</title><rect x="99.7052%" y="629" width="0.0199%" height="15" fill="rgb(221,155,16)" fg:x="205276" fg:w="41"/><text x="99.9552%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.02%)</title><rect x="99.7251%" y="629" width="0.0199%" height="15" fill="rgb(215,215,53)" fg:x="205317" fg:w="41"/><text x="99.9751%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 0.02%)</title><rect x="99.7484%" y="629" width="0.0180%" height="15" fill="rgb(223,4,10)" fg:x="205365" fg:w="37"/><text x="99.9984%" y="639.50"></text></g><g><title>all (205,883 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="205883"/><text x="0.2500%" y="735.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (203,536 samples, 98.86%)</title><rect x="1.1400%" y="709" width="98.8600%" height="15" fill="rgb(227,97,0)" fg:x="2347" fg:w="203536"/><text x="1.3900%" y="719.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (203,536 samples, 98.86%)</title><rect x="1.1400%" y="693" width="98.8600%" height="15" fill="rgb(234,150,53)" fg:x="2347" fg:w="203536"/><text x="1.3900%" y="703.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>argten-backend-rust`std::sys::pal::unix::thread::Thread::new::thread_start (203,532 samples, 98.86%)</title><rect x="1.1419%" y="677" width="98.8581%" height="15" fill="rgb(228,201,54)" fg:x="2351" fg:w="203532"/><text x="1.3919%" y="687.50">argten-backend-rust`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}} (203,532 samples, 98.86%)</title><rect x="1.1419%" y="661" width="98.8581%" height="15" fill="rgb(222,22,37)" fg:x="2351" fg:w="203532"/><text x="1.3919%" y="671.50">argten-backend-rust`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace (203,532 samples, 98.86%)</title><rect x="1.1419%" y="645" width="98.8581%" height="15" fill="rgb(237,53,32)" fg:x="2351" fg:w="203532"/><text x="1.3919%" y="655.50">argten-backend-rust`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memset (463 samples, 0.22%)</title><rect x="99.7751%" y="629" width="0.2249%" height="15" fill="rgb(233,25,53)" fg:x="205420" fg:w="463"/><text x="100.0251%" y="639.50"></text></g></svg></svg>